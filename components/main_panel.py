"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è Sci.Net.Node
–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —Å —Å–µ—Ä—ã–º —Ñ–æ–Ω–æ–º; –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä —Ä–∞—Å–∫—Ä—ã—Ç–∏—è; –æ—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö
"""

import re
import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse

# –°—Ç–∏–ª–∏: –∫–∞—Ä—Ç–æ—á–∫–∞-–æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ (—Å–µ—Ä—ã–π), –¥–µ—Ç–∞–ª–∏ (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π), –±–æ–∫–æ–≤—ã–µ/–ø—Ä–æ—á–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–º–∏ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
CUSTOM_CSS = """
<style>
.card-toc { background:#f1f3f5; border:1px solid #e0e0e0; border-radius:10px; padding:16px 18px; margin:14px 0; }
.card-toc:hover { box-shadow:0 2px 10px rgba(0,0,0,0.08); }
.card-title { font-weight:600; font-size:1.05rem; color:#212529; }
.card-meta  { color:#495057; font-size:0.92rem; }

.slider-vert { position:relative; height:36px; cursor:pointer; display:flex; align-items:center; gap:8px; color:#495057; }
.slider-rail { position:absolute; left:0; right:0; top:0; height:1px; background:#dee2e6; }
.slider-thumb { width:24px; height:24px; border-radius:50%; background:#ced4da; border:1px solid #adb5bd; display:flex; align-items:center; justify-content:center; z-index:1; }
.slider-icon { transform:rotate(90deg); font-size:14px; }

.details-pane { background:#fafbfc; border:1px solid #eceff1; border-radius:10px; padding:14px 16px; margin:8px 0 0 0; }
.badge { background:#e9ecef; border-radius:12px; padding:2px 8px; font-size:0.85rem; color:#343a40; }
</style>
"""

HTML_TAG_RE = re.compile(r"<[^>]+>")
MAILTO_RE = re.compile(r"^(mailto:|href=)", re.IGNORECASE)
BRACKETS_RE = re.compile(r"^\s*\[.*\]\s*$")

class MainPanel:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤ –≤–∏–¥–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ DOI"""

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            st.markdown("""
            ### –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
            1. üîê –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            2. üìß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–∏—Ö –ø–∏—Å—å–º–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è DOI –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            3. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            4. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –¥–∏–∞–≥—Ä–∞–º–º
            """)
            return

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS
        st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        unique_map = self._group_by_unique_doi(publications)
        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {len(unique_map)}")

        # –õ–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        for doi, pub in unique_map.items():
            self._render_toc_card(pub, email_handler)

    # ===== –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ =====
    def _clean_html(self, s: Any) -> str:
        if s is None:
            return ""
        s = str(s)
        s = HTML_TAG_RE.sub("", s)
        return s.strip()

    def _acceptable(self, val: Any) -> bool:
        if val is None:
            return False
        if not isinstance(val, str):
            return True
        s = val.strip()
        if not s:
            return False
        if BRACKETS_RE.match(s):
            return False
        if MAILTO_RE.match(s):
            return False
        return True

    def _clean_doi(self, doi: str) -> str:
        if not doi:
            return ''
        s = str(doi).strip()
        for p in ('https://doi.org/','http://doi.org/','doi.org/','DOI:','doi:'):
            s = s.replace(p,'')
        return s.strip()

    # ===== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è =====
    def _group_by_unique_doi(self, publications: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        grouped: Dict[str, Dict[str, Any]] = {}
        for pub in publications:
            doi = self._clean_doi(pub.get('doi',''))
            if not doi:
                continue
            g = grouped.setdefault(doi, {
                'doi': doi, 'title':'', 'type':'', 'year':'', 'journal':'',
                'first_author':'', 'last_author':'', 'authors': set(), 'keywords': set(),
                'abstract':'', 'notes': [], 'volume':'', 'issue':'', 'pages':'', 'emails': []
            })
            # –ü–æ–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ ‚Äî –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≥–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—á–∏—â–∞–µ–º HTML
            for field in ['title','journal','volume','issue','pages','abstract']:
                v = pub.get(field)
                if v and not g[field] and self._acceptable(v):
                    g[field] = self._clean_html(v)
            t = pub.get('type','')
            if t and not g['type'] and self._acceptable(t):
                g['type'] = self._clean_html(t)
            y = pub.get('year','')
            if y and not g['year'] and str(y).isdigit() and 1800 <= int(y) <= 2100:
                g['year'] = str(y)
            # –ê–≤—Ç–æ—Ä—ã/–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            au = pub.get('authors', [])
            if isinstance(au, list):
                for a in au:
                    if self._acceptable(a):
                        g['authors'].add(self._clean_html(a))
                if au and not g['first_author']:
                    g['first_author'] = self._clean_html(au[0])
                if len(au) > 1:
                    g['last_author'] = self._clean_html(au[-1])
            elif isinstance(au, str) and self._acceptable(au):
                g['authors'].add(self._clean_html(au))
                if not g['first_author']:
                    g['first_author'] = self._clean_html(au)
            kws = pub.get('keywords', [])
            if isinstance(kws, list):
                for k in kws:
                    if self._acceptable(k):
                        g['keywords'].add(self._clean_html(k))
            elif isinstance(kws, str) and self._acceptable(kws):
                g['keywords'].add(self._clean_html(kws))
            note = pub.get('notes','')
            if isinstance(note, str) and self._acceptable(note) and note not in g['notes']:
                g['notes'].append(self._clean_html(note))
            # –ü–∏—Å—å–º–∞
            g['emails'].append({
                'folder': pub.get('folder',''), 'from': pub.get('from',''),
                'subject': pub.get('subject',''), 'date': pub.get('date',''), 'uid': pub.get('uid',''),
                'text': pub.get('text',''), 'html': pub.get('html','')
            })
        for g in grouped.values():
            g['authors'] = sorted(list(g['authors']))
            g['keywords'] = sorted(list(g['keywords']))
        return grouped

    # ===== –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏-–æ–≥–ª–∞–≤–ª–µ–Ω–∏—è =====
    def _render_toc_card(self, pub: Dict[str, Any], email_handler=None):
        doi = pub['doi']
        title = pub.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        st.markdown("<div class='card-toc'>", unsafe_allow_html=True)
        st.markdown(f"<div class='card-title'>{self._clean_html(title)}</div>", unsafe_allow_html=True)
        # –ú–µ—Ç–∞–ª–∏–Ω–∏—è
        meta = []
        if pub.get('type'): meta.append(self._clean_html(pub['type']))
        if pub.get('year'): meta.append(self._clean_html(pub['year']))
        if pub.get('journal'): meta.append(self._clean_html(pub['journal']))
        fa, la = pub.get('first_author'), pub.get('last_author')
        if fa and la and fa != la:
            meta.append(f"–ê–≤—Ç–æ—Ä—ã: {self._clean_html(fa)} ‚Äì {self._clean_html(la)}")
        elif fa:
            meta.append(f"–ê–≤—Ç–æ—Ä: {self._clean_html(fa)}")
        meta_line = " ‚Ä¢ ".join(meta)
        st.markdown(f"<div class='card-meta'>DOI: <code>{doi}</code>{' ‚Ä¢ ' + meta_line if meta_line else ''}</div>", unsafe_allow_html=True)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä (–≤–∏–∑—É–∞–ª—å–Ω—ã–π): –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ —á–µ—Ä–µ–∑ toggle + –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫
        open_key = f"open_{doi}"
        is_open = st.toggle("–î–µ—Ç–∞–ª–∏", key=open_key, value=False)
        st.markdown("<div class='slider-vert'><div class='slider-rail'></div><div class='slider-thumb'><span class='slider-icon'>‚ûú</span></div><span>–ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å</span></div>", unsafe_allow_html=True)

        if is_open:
            st.markdown("<div class='details-pane'>", unsafe_allow_html=True)
            self._render_details_tabs(pub, email_handler)
            st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # ===== –î–µ—Ç–∞–ª–∏ =====
    def _render_details_tabs(self, pub: Dict[str, Any], email_handler=None):
        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìß –ü–∏—Å—å–º–∞", "üîó –î–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        with tab1:
            self._render_publication_data_tab(pub)
        with tab2:
            self._render_emails_tab(pub.get('emails', []))
        with tab3:
            self._render_actions_tab(pub, email_handler)
        with tab4:
            self._render_stats_tab(pub)

    def _render_publication_data_tab(self, pub: Dict[str, Any]):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            authors = pub.get('authors', [])
            if authors:
                st.markdown("**–ê–≤—Ç–æ—Ä—ã (AU):**")
                for i, a in enumerate(authors[:10]):
                    st.markdown(f"{i+1}. {self._clean_html(a)}")
                if len(authors) > 10:
                    st.markdown(f"*...–∏ –µ—â–µ {len(authors)-10} –∞–≤—Ç–æ—Ä–æ–≤*")
            for label, field in [("–¢–æ–º (VL)", 'volume'), ("–í—ã–ø—É—Å–∫ (IS)", 'issue'), ("–°—Ç—Ä–∞–Ω–∏—Ü—ã (SP)", 'pages')]:
                v = pub.get(field)
                if v:
                    st.markdown(f"**{label}:** {self._clean_html(v)}")
        with col2:
            st.subheader("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            keywords = pub.get('keywords', [])
            if keywords:
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE):**")
                st.markdown(", ".join([self._clean_html(k) for k in keywords[:15]]))
                if len(keywords) > 15:
                    st.markdown(f"*...–∏ –µ—â–µ {len(keywords)-15} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*")
            abstract = pub.get('abstract', '')
            if abstract:
                st.markdown("**–ê–±—Å—Ç—Ä–∞–∫—Ç (AB):**")
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç"):
                    st.markdown(self._clean_html(abstract))
            notes = pub.get('notes', [])
            if notes:
                st.markdown("**–ó–∞–º–µ—Ç–∫–∏ (N2/PA):**")
                for i, note in enumerate(notes, 1):
                    st.markdown(f"{i}. {self._clean_html(note)}")

    def _render_emails_tab(self, emails: List[Dict[str, Any]]):
        st.subheader(f"üìß –ü–∏—Å—å–º–∞ —Å —ç—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π ({len(emails)})")
        if not emails:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        for i, email in enumerate(emails, 1):
            with st.expander(f"–ü–∏—Å—å–º–æ {i}: {self._clean_html(email.get('subject','–ë–µ–∑ —Ç–µ–º—ã'))[:60]}..."):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**üìÅ –ü–∞–ø–∫–∞:** {self._clean_html(email.get('folder','–ù–µ —É–∫–∞–∑–∞–Ω–∞'))}")
                    st.markdown(f"**üë§ –û—Ç –∫–æ–≥–æ:** {self._clean_html(email.get('from','–ù–µ —É–∫–∞–∑–∞–Ω'))}")
                    st.markdown(f"**üìÖ –î–∞—Ç–∞:** {self._format_date(email.get('date',''))}")
                with col2:
                    st.markdown(f"**üÜî UID:** {self._clean_html(email.get('uid','–ù–µ —É–∫–∞–∑–∞–Ω'))}")
                txt = email.get('text','')
                if txt:
                    prev = self._clean_html(txt)[:300] + ("..." if len(txt) > 300 else "")
                    st.markdown("**üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):**")
                    st.markdown(f"```\n{prev}\n```")

    def _render_actions_tab(self, pub: Dict[str, Any], email_handler=None):
        st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        doi = pub.get('doi','')
        title = pub.get('title','')
        if not doi:
            st.warning("DOI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            return
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã", key=f"m3_{doi}"):
                self._create_request_link("M3_REQUEST", doi, title, email_handler)
            if st.button("üìö PDF —Ñ–∞–π–ª", key=f"pdf_{doi}"):
                self._create_request_link("PDF_REQUEST", doi, title, email_handler)
        with col2:
            if st.button("üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"kw_{doi}"):
                self._create_request_link("KW_REQUEST", doi, title, email_handler)
            if st.button("üìñ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cits_{doi}"):
                self._create_request_link("CITS_REQUEST", doi, title, email_handler)
        with col3:
            st.markdown(f"[üîó DOI.org](https://doi.org/{doi})")
            st.markdown(f"[üéì Google Scholar](https://scholar.google.com/scholar?q={urllib.parse.quote(title)})")
        with col4:
            st.markdown(f"[üìö PubMed](https://pubmed.ncbi.nlm.nih.gov/?term={urllib.parse.quote(title)})")

    def _create_request_link(self, request_type: str, doi: str, title: str, email_handler=None):
        pattern = REQUEST_PATTERNS.get(request_type, "[request]")
        body = f"{pattern} https://doi.org/{doi}"
        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"
        st.success("üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")
        if email_handler and email_handler.connected:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key=f"send_{request_type}_{doi}"):
                if email_handler.send_request_email(title, body):
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    def _format_date(self, date_obj):
        if isinstance(date_obj, datetime):
            return date_obj.strftime('%Y-%m-%d %H:%M')
        elif isinstance(date_obj, str):
            return date_obj
        else:
            return str(date_obj) if date_obj else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
