\"\"\"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–∏—Å–µ–º –¥–ª—è Sci.Net.Node\"\"\"

import streamlit as st
from typing import List, Dict, Any
from datetime import datetime
import urllib.parse

class MainPanel:
    \"\"\"–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∏—Å–µ–º, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã\"\"\"

    def render(self, emails: List[Dict[str, Any]], email_handler=None):
        \"\"\"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Å–µ–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–µ–∫\"\"\"
        if not emails:
            st.info(\"üì≠ –ù–µ—Ç –ø–∏—Å–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º\")
            return

        st.header(f\"üìß –ü–æ–∫–∞–∑–∞–Ω–æ –ø–∏—Å–µ–º: {len(emails)}\")

        for email in emails:
            self._render_email_card(email, email_handler)

    def _render_email_card(self, email: Dict[str, Any], email_handler=None):
        with st.container():
            st.markdown(
                \"\"\"<div style=\"border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background-color: #f0f8ff;\">\"\"\",
                unsafe_allow_html=True)
            
            subject = email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email.get('date')
            date_str = date.strftime('%Y-%m-%d %H:%M') if isinstance(date, datetime) else str(date)
            folder = email.get('folder', '')
            doi = email.get('doi', '')

            col1, col2 = st.columns([4, 1])
            with col1:
                st.markdown(f\"### {subject}\")
                if doi:
                    st.markdown(f\"**DOI:** [{doi}](https://doi.org/{doi})\")
                st.markdown(f\"**–ü–∞–ø–∫–∞:** {folder}\")
                st.markdown(f\"**–î–∞—Ç–∞:** {date_str}\")

            with col2:
                expanded = st.checkbox(\"–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏\", key=f\"details_{email.get('uid', '')}\")

            if expanded:
                st.markdown(\"---\")
                self._render_email_details(email, email_handler)

            st.markdown(\"</div>\", unsafe_allow_html=True)

    def _render_email_details(self, email: Dict[str, Any], email_handler=None):
        st.subheader(\"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–∏—Å—å–º–∞\")

        st.markdown(f\"**–û—Ç:** {email.get('from', '')}\")
        st.markdown(f\"**–ö–æ–º—É:** {email.get('to', '')}\")
        st.markdown(f\"**–¢–µ–º–∞:** {email.get('subject', '')}\")
        st.markdown(f\"**–î–∞—Ç–∞:** {email.get('date', '')}\")

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ HTML –∫–∞–∫ plain text)
        text = email.get('text', '')
        if text:
            st.markdown(\"**–¢–µ–ª–æ –ø–∏—Å—å–º–∞:**\")
            st.text_area(\"\", text, height=200)
        else:
            st.info(\"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\")

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ Sci.Net.Core
        if not email_handler or not email_handler.connected:
            st.info(\"–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\")
            return

        doi = email.get('doi', '')
        subject = email.get('subject', '')
        request_types = {
            \"M3\": \"[M3 request]\",
            \"PDF\": \"[PDF request]\",
            \"PubMed\": \"[PMID request]\",
            \"Citations\": \"[CITS request]\",
            \"Insert Abstract\": \"[insert abstract]\",
            \"Insert Keywords\": \"[insert authors keywords]\",
            \"Insert Notes\": \"[insert notes]\"
        }

        st.markdown(\"üîó **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Sci.Net.Core:**\")

        cols = st.columns(4)
        for i, (label, pattern) in enumerate(request_types.items()):
            if cols[i % 4].button(label, key=f\"req_{label}_{email.get('uid', '')}\"):
                body = f\"{pattern} {doi}\" if doi else pattern
                sent = email_handler.send_request_email(subject, body)
                if sent:
                    st.success(f\"–ó–∞–ø—Ä–æ—Å '{label}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\")
                else:
                    st.error(f\"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ '{label}'.\")

