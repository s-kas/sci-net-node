"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è Sci.Net.Node
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ DOI –≤ –≤–∏–¥–µ –ª–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫
"""

import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse

class MainPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""

    def __init__(self):
        pass

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""

        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            st.markdown("""
            ### –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
            1. üîê –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            2. üìß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–∏—Ö –ø–∏—Å—å–º–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è DOI –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            3. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            4. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –¥–∏–∞–≥—Ä–∞–º–º
            """)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI
        unique_publications = self._group_by_unique_doi(publications)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {len(unique_publications)}")
        
        if len(publications) > len(unique_publications):
            st.info(f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ DOI. –í—Å–µ–≥–æ –ø–∏—Å–µ–º —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {len(publications)}")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ –ª–µ–Ω—Ç—ã
        for doi, pub_data in unique_publications.items():
            self._render_publication_card(pub_data, email_handler)

    def _group_by_unique_doi(self, publications: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        
        grouped = {}

        for pub in publications:
            doi = self._extract_clean_doi(pub)
            
            if not doi:
                continue
                
            if doi not in grouped:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ DOI
                grouped[doi] = {
                    'doi': doi,
                    'title': '',
                    'type': '',
                    'year': '',
                    'journal': '',
                    'first_author': '',
                    'last_author': '',
                    'authors': set(),
                    'keywords': set(),
                    'abstract': '',
                    'notes': [],
                    'volume': '',
                    'issue': '',
                    'pages': '',
                    'emails': []
                }
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Å—å–º–∞
            current_data = grouped[doi]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫—Ä–æ–º–µ –ø–æ–ª–µ–π –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö)
            for field in ['title', 'journal', 'volume', 'issue', 'pages', 'abstract']:
                field_value = pub.get(field, '')
                if field_value and not current_data[field]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                    if not (isinstance(field_value, str) and field_value.strip().startswith('[') and field_value.strip().endswith(']')):
                        current_data[field] = field_value
            
            # –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –∏—Å–∫–ª—é—á–∞–µ–º mailto —Å—Å—ã–ª–∫–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            pub_type = pub.get('type', '')
            if pub_type and not current_data['type']:
                if not (pub_type.startswith('href=') or pub_type.startswith('mailto:') or 
                       (pub_type.strip().startswith('[') and pub_type.strip().endswith(']'))):
                    current_data['type'] = pub_type
            
            # –ì–æ–¥ - –±–µ—Ä–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –≥–æ–¥
            pub_year = pub.get('year', '')
            if pub_year and not current_data['year']:
                if str(pub_year).isdigit() and 1900 <= int(pub_year) <= 2030:
                    current_data['year'] = pub_year
            
            # –ê–≤—Ç–æ—Ä—ã - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
            pub_authors = pub.get('authors', [])
            if isinstance(pub_authors, list):
                current_data['authors'].update(pub_authors)
            elif pub_authors:
                current_data['authors'].add(pub_authors)
            
            # –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Ä
            if pub_authors and not current_data['first_author']:
                if isinstance(pub_authors, list) and pub_authors:
                    current_data['first_author'] = pub_authors[0]
                elif isinstance(pub_authors, str):
                    current_data['first_author'] = pub_authors
                    
            if pub_authors and isinstance(pub_authors, list) and len(pub_authors) > 1:
                current_data['last_author'] = pub_authors[-1]
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
            pub_keywords = pub.get('keywords', [])
            if isinstance(pub_keywords, list):
                current_data['keywords'].update(pub_keywords)
            elif pub_keywords:
                current_data['keywords'].add(pub_keywords)
            
            # –ó–∞–º–µ—Ç–∫–∏ - —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ
            pub_notes = pub.get('notes', '')
            if pub_notes and pub_notes not in current_data['notes']:
                current_data['notes'].append(pub_notes)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Å—å–º–µ
            email_info = {
                'folder': pub.get('folder', ''),
                'from': pub.get('from', ''),
                'subject': pub.get('subject', ''),
                'date': pub.get('date', ''),
                'uid': pub.get('uid', ''),
                'text': pub.get('text', ''),
                'html': pub.get('html', '')
            }
            current_data['emails'].append(email_info)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sets –≤ lists –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for doi_data in grouped.values():
            doi_data['authors'] = sorted(list(doi_data['authors']))
            doi_data['keywords'] = sorted(list(doi_data['keywords']))
            
        return grouped
    
    def _extract_clean_doi(self, pub: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ DOI"""
        doi = pub.get('doi', '')
        if not doi:
            return ''
            
        # –û—á–∏—â–∞–µ–º DOI –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        doi = str(doi).strip()
        doi = doi.replace('https://doi.org/', '')
        doi = doi.replace('http://doi.org/', '')
        doi = doi.replace('doi.org/', '')
        doi = doi.replace('DOI:', '')
        doi = doi.replace('doi:', '')
        
        return doi.strip()

    def _render_publication_card(self, pub_data: Dict[str, Any], email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        doi = pub_data['doi']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä-–∫–∞—Ä—Ç–æ—á–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        with st.container():
            st.markdown(f"""
                <div style="
                    border: 2px solid #e0e0e0;
                    border-radius: 12px;
                    padding: 20px;
                    margin: 15px 0;
                    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    transition: all 0.3s ease;
                ">
            """, unsafe_allow_html=True)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            title = pub_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            col1, col2 = st.columns([5, 1])
            
            with col1:
                st.markdown(f"### üìÑ {title}")
                st.markdown(f"**DOI:** `{doi}` [üîó](https://doi.org/{doi})")
            
            with col2:
                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π
                expanded = st.toggle("–î–µ—Ç–∞–ª–∏", key=f"details_{doi}")

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
            col1, col2, col3 = st.columns([2, 2, 2])

            with col1:
                # –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                pub_type = pub_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                st.markdown(f"**–¢–∏–ø (M3/TY):** {pub_type}")
                
                # –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏  
                year = pub_data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')
                st.markdown(f"**–ì–æ–¥ (PY):** {year}")

            with col2:
                # –ñ—É—Ä–Ω–∞–ª
                journal = pub_data.get('journal', '–ù–µ —É–∫–∞–∑–∞–Ω')
                st.markdown(f"**–ñ—É—Ä–Ω–∞–ª (T2):** {journal}")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
                email_count = len(pub_data.get('emails', []))
                st.markdown(f"**üìß –ü–∏—Å–µ–º:** {email_count}")

            with col3:
                # –ê–≤—Ç–æ—Ä—ã
                first_author = pub_data.get('first_author', '')
                last_author = pub_data.get('last_author', '')
                authors_count = len(pub_data.get('authors', []))
                
                if first_author:
                    st.markdown(f"**–ü–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ä:** {first_author}")
                    
                if last_author and last_author != first_author:
                    st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Ä:** {last_author}")
                elif authors_count > 1:
                    st.markdown(f"**–ê–≤—Ç–æ—Ä–æ–≤:** {authors_count}")

            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if expanded:
                st.markdown("---")
                self._render_expanded_details(pub_data, email_handler)

            st.markdown("</div>", unsafe_allow_html=True)

    def _render_expanded_details(self, pub_data: Dict[str, Any], email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìß –ü–∏—Å—å–º–∞", "üîó –î–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

        with tab1:
            self._render_publication_data_tab(pub_data)

        with tab2:
            self._render_emails_tab(pub_data.get('emails', []))

        with tab3:
            self._render_actions_tab(pub_data, email_handler)

        with tab4:
            self._render_stats_tab(pub_data)

    def _render_publication_data_tab(self, pub_data: Dict[str, Any]):
        """–¢–∞–± —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            # –í—Å–µ –∞–≤—Ç–æ—Ä—ã
            authors = pub_data.get('authors', [])
            if authors:
                st.markdown("**–ê–≤—Ç–æ—Ä—ã (AU):**")
                for i, author in enumerate(authors[:10]):
                    st.markdown(f"{i+1}. {author}")
                if len(authors) > 10:
                    st.markdown(f"*...–∏ –µ—â–µ {len(authors)-10} –∞–≤—Ç–æ—Ä–æ–≤*")

            # –ë–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            volume = pub_data.get('volume', '')
            issue = pub_data.get('issue', '') 
            pages = pub_data.get('pages', '')

            if volume:
                st.markdown(f"**–¢–æ–º (VL):** {volume}")
            if issue:
                st.markdown(f"**–í—ã–ø—É—Å–∫ (IS):** {issue}")
            if pages:
                st.markdown(f"**–°—Ç—Ä–∞–Ω–∏—Ü—ã (SP):** {pages}")

        with col2:
            st.subheader("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = pub_data.get('keywords', [])
            if keywords:
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE):**")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –≤–∏–¥–µ —Ç–µ–≥–æ–≤
                keywords_text = ", ".join(keywords[:15])
                st.markdown(f"_{keywords_text}_")
                
                if len(keywords) > 15:
                    st.markdown(f"*...–∏ –µ—â–µ {len(keywords)-15} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*")

            # –ê–±—Å—Ç—Ä–∞–∫—Ç
            abstract = pub_data.get('abstract', '')
            if abstract:
                st.markdown("**–ê–±—Å—Ç—Ä–∞–∫—Ç (AB):**")
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç"):
                    st.markdown(abstract)

            # –ó–∞–º–µ—Ç–∫–∏
            notes = pub_data.get('notes', [])
            if notes:
                st.markdown("**–ó–∞–º–µ—Ç–∫–∏ (N2/PA):**")
                for i, note in enumerate(notes, 1):
                    st.markdown(f"{i}. {note}")

    def _render_emails_tab(self, emails: List[Dict[str, Any]]):
        """–¢–∞–± —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∏—Å–µ–º"""

        st.subheader(f"üìß –ü–∏—Å—å–º–∞ —Å —ç—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π ({len(emails)})")
        
        if not emails:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–∏—Å–µ–º
        for i, email in enumerate(emails, 1):
            with st.expander(f"–ü–∏—Å—å–º–æ {i}: {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:60]}..."):
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"**üìÅ –ü–∞–ø–∫–∞:** {email.get('folder', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                    st.markdown(f"**üë§ –û—Ç –∫–æ–≥–æ:** {email.get('from', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    st.markdown(f"**üìÖ –î–∞—Ç–∞:** {self._format_date(email.get('date', ''))}")
                
                with col2:
                    st.markdown(f"**üìã –¢–µ–º–∞:** {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}")
                    st.markdown(f"**üÜî UID:** {email.get('uid', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                email_text = email.get('text', '')
                if email_text:
                    preview_text = email_text[:300] + ("..." if len(email_text) > 300 else "")
                    st.markdown("**üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä):**")
                    st.markdown(f"```\n{preview_text}\n```")

    def _render_actions_tab(self, pub_data: Dict[str, Any], email_handler=None):
        """–¢–∞–± —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

        st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")

        doi = pub_data.get('doi', '')
        title = pub_data.get('title', '')

        if not doi:
            st.warning("DOI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            return

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Sci.Net.Core
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("**üìÑ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã", key=f"m3_{doi}", help="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (M3)"):
                self._create_request_link("M3_REQUEST", doi, title, email_handler)

            if st.button(f"üìö PDF —Ñ–∞–π–ª", key=f"pdf_{doi}", help="–ó–∞–ø—Ä–æ—Å–∏—Ç—å PDF —Ñ–∞–π–ª"):
                self._create_request_link("PDF_REQUEST", doi, title, email_handler)

            if st.button(f"üî¨ PubMed ID", key=f"pmid_{doi}", help="–ó–∞–ø—Ä–æ—Å–∏—Ç—å PMID"):
                self._create_request_link("PMID_REQUEST", doi, title, email_handler)

        with col2:
            st.markdown("**üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"kw_{doi}", help="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"):
                self._create_request_link("KW_REQUEST", doi, title, email_handler)

            if st.button(f"üìñ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cits_{doi}", help="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
                self._create_request_link("CITS_REQUEST", doi, title, email_handler)

        with col3:
            st.markdown("**‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üìù –î–æ–±–∞–≤–∏—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç", key=f"abs_{doi}", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç"):
                self._create_insert_link("INSERT_ABSTRACT", title)

            if st.button(f"üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"keys_{doi}", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"):
                self._create_insert_link("INSERT_KEYWORDS", title)

            if st.button(f"üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", key=f"notes_{doi}", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏"):
                self._create_insert_link("INSERT_NOTES", title)

        # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
        st.markdown("---")
        st.markdown("**üåê –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏:**")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.markdown(f"[üîó DOI.org](https://doi.org/{doi})")
        with col2:
            st.markdown(f"[üéì Google Scholar](https://scholar.google.com/scholar?q={urllib.parse.quote(title)})")
        with col3:
            st.markdown(f"[üìö PubMed](https://pubmed.ncbi.nlm.nih.gov/?term={urllib.parse.quote(title)})")
        with col4:
            st.markdown(f"[üîç Crossref](https://search.crossref.org/?q={urllib.parse.quote(title)})")

    def _render_stats_tab(self, pub_data: Dict[str, Any]):
        """–¢–∞–± —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""

        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∏—Å—å–º–∞–º")
        
        emails = pub_data.get('emails', [])
        
        if not emails:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º
        folders = [email.get('folder', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for email in emails]
        folder_counts = pd.Series(folders).value_counts()

        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–ø–∫–∞–º:**")
            for folder, count in folder_counts.items():
                percentage = (count / len(emails)) * 100
                st.markdown(f"- {folder}: {count} –ø–∏—Å–µ–º ({percentage:.1f}%)")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
        senders = [email.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for email in emails]
        sender_counts = pd.Series(senders).value_counts()

        with col2:
            st.markdown("**üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã:**")
            for sender, count in sender_counts.head(5).items():
                percentage = (count / len(emails)) * 100
                sender_short = sender[:30] + "..." if len(sender) > 30 else sender
                st.markdown(f"- {sender_short}: {count} –ø–∏—Å–µ–º ({percentage:.1f}%)")

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        dates = [email.get('date') for email in emails if email.get('date')]
        if dates:
            dates_formatted = [self._parse_date(date) for date in dates]
            dates_formatted = [d for d in dates_formatted if d]  # –£–±–∏—Ä–∞–µ–º None
            
            if dates_formatted:
                min_date = min(dates_formatted)
                max_date = max(dates_formatted)
                
                st.markdown("---")
                st.markdown("**üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:**")
                st.markdown(f"- –ü–µ—Ä–≤–æ–µ –ø–∏—Å—å–º–æ: {min_date.strftime('%Y-%m-%d %H:%M')}")
                st.markdown(f"- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ: {max_date.strftime('%Y-%m-%d %H:%M')}")
                
                time_span = (max_date - min_date).days
                if time_span > 0:
                    st.markdown(f"- –ü–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {time_span} –¥–Ω–µ–π")

    def _create_request_link(self, request_type: str, doi: str, title: str, email_handler=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""

        pattern = REQUEST_PATTERNS.get(request_type, "[request]")
        body = f"{pattern} https://doi.org/{doi}"

        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"

        st.success(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω email_handler, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        if email_handler and email_handler.connected:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key=f"send_{request_type}_{doi}"):
                if email_handler.send_request_email(title, body):
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    def _create_insert_link(self, insert_type: str, title: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""

        body_templates = {
            "INSERT_ABSTRACT": "PDF could be attached to this mail\n\nAB - [–≤—Å—Ç–∞–≤—å—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç –∑–¥–µ—Å—å]\n\nBest regards,",
            "INSERT_KEYWORDS": "DE - [–≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]\n\nBest regards,", 
            "INSERT_NOTES": "PA - [–≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –∑–¥–µ—Å—å]\n\nBest regards,"
        }

        body = body_templates.get(insert_type, "Best regards,")

        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"

        st.success(f"üîó –®–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")
        
    def _format_date(self, date_obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if isinstance(date_obj, datetime):
            return date_obj.strftime('%Y-%m-%d %H:%M')
        elif isinstance(date_obj, str):
            return date_obj
        else:
            return str(date_obj) if date_obj else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
    def _parse_date(self, date_obj):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç"""
        if isinstance(date_obj, datetime):
            return date_obj
        elif isinstance(date_obj, str):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã
                from dateutil import parser
                return parser.parse(date_obj)
            except:
                return None
        return None