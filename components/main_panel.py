"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∏—Å–µ–º –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Å—Ç–∏–ª—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞, —Ä–∞—Å–∫—Ä. –ø–æ –∫–Ω–æ–ø–∫–µ –ü–æ–¥—Ä–æ–±–Ω–µ–µ, –æ—á–∏—Å—Ç–∫–∞ HTML
"""
import re
import streamlit as st
from typing import List, Dict, Any
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse

CLEAN_TAG_RE = re.compile(r"<[^>]+>")
MAILTO_RE = re.compile(r"^(mailto:|href=)", re.IGNORECASE)
BRACKETS_RE = re.compile(r"^\s*\[.*\]\s*$")

def clean_val(val):
    if val is None:
        return ''
    val = str(val)
    val = CLEAN_TAG_RE.sub('', val)
    val = re.sub(r"mailto:|href=", '', val)
    val = val.strip()
    return val

class MainPanel:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    def __init__(self):
        pass

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        st.markdown(
            '''<style>
                .stApp {background-color: #23242a;}
                section[data-testid="stSidebar"] {background-color: #262833;}
                .card {background:#e8e9ea; border-radius: 10px; padding:16px 18px; margin:16px 0 0 0;}
                .toc-main {display:flex;gap:10px;align-items:center; color:#222; font-size:1.1rem;}
                .toc-doi {font-family:ui-monospace,SFMono-Regular,Menlo,monospace;background:#f1f3f6;padding:1px 7px 1px 7px;border-radius:6px;font-size:0.97rem;letter-spacing:0.03em;}
                .toc-ti {font-weight:700; word-break:break-word;flex-grow:1;}
                .toc-meta {color:#3a444e; font-size:0.98rem;}
                .btn-more {width:100%; display:block; text-align:center; letter-spacing:0.01em; background:#cfd1d6;border:1px solid #b9bac1;border-radius:20px;padding:6px 0 6px 0; cursor:pointer; font-size:1.02rem;}
                .btn-more:hover {background:#b1b2b7;}
                .details-pane {background:#f7f7fa; border-radius:10px; margin-top:2px; padding:18px 18px 10px 18px;}
            </style>''', unsafe_allow_html=True)

        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(publications)}")

        for idx, pub in enumerate(publications, 1):
            self._render_letter_card(pub, key=f"letter_{idx}")

    def _get_last(self, v):
        if isinstance(v, list) and v:
            return v[-1]
        return v if v else ''

    def _render_letter_card(self, pub: Dict[str, Any], key: str):
        # TI (–∏–ª–∏ —Ç–µ–º–∞ –ø–∏—Å—å–º–∞ –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        ti = clean_val(pub.get('title') or pub.get('TI') or pub.get('subject') or '')
        doi = self._clean_doi(pub.get('doi',''))
        # M3 –∏–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç, TY, –∏–Ω–∞—á–µ "–ù–µ —É–∫–∞–∑–∞–Ω"
        pub_type = clean_val(pub.get('M3') or pub.get('type') or pub.get('TY') or '–ù–µ —É–∫–∞–∑–∞–Ω')
        # PY
        year = clean_val(self._get_last(pub.get('PY') or pub.get('year')) or '–ù–µ —É–∫–∞–∑–∞–Ω')
        # AU: –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        au = pub.get('AU') or pub.get('authors') or []
        if isinstance(au, str):
            au = [au]
        au = [clean_val(x) for x in au if x and not BRACKETS_RE.match(str(x))]
        fa = au[0] if au else ''
        la = au[-1] if au and len(au)>1 else (fa if fa else '')
        # CARD
        st.markdown('<div class="card">', unsafe_allow_html=True)
        header = f"""
          <div class='toc-main'>
            <span class='toc-ti'>{ti}</span>
            <span class='toc-doi'>DOI: {doi}</span>
            <span class='toc-meta'>‚Ä¢ {pub_type} ‚Ä¢ {year}</span>
            <span class='toc-meta'>‚Ä¢ {fa}{' ‚Äì ' + la if la and fa and la != fa else ''}</span>
          </div>
        """
        st.markdown(header, unsafe_allow_html=True)
        # Toggle-–∫–Ω–æ–ø–∫–∞ –ü–æ–¥—Ä–æ–±–Ω–µ–µ/–°–∫—Ä—ã—Ç—å
        exp_state = st.session_state.get(f"exp_{key}", False)
        label = "–°–∫—Ä—ã—Ç—å ‚ñ≤" if exp_state else "–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚ñº"
        if st.button(label, key=f"btn_{key}", use_container_width=True):
            st.session_state[f"exp_{key}"] = not exp_state
            exp_state = not exp_state
        if exp_state:
            st.markdown('<div class="details-pane">', unsafe_allow_html=True)
            self._render_details(pub)
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

    def _render_details(self, pub: Dict[str, Any]):
        def show(val):
            if isinstance(val,list):
                for v in val:
                    v = clean_val(v)
                    if v: st.markdown(f"- {v}")
            else:
                v = clean_val(val)
                if v: st.markdown(f"{v}")
        indices = [
            ('DOI', pub.get('doi') or pub.get('DO')), ('TI', pub.get('title') or pub.get('TI')),
            ('M3', pub.get('M3') or pub.get('type')), ('TY', pub.get('TY')),
            ('PY', pub.get('PY') or pub.get('year')), ('T2', pub.get('T2') or pub.get('journal')),
            ('VL', pub.get('VL') or pub.get('volume')), ('IS', pub.get('IS') or pub.get('issue')),
            ('SP', pub.get('SP') or pub.get('pages')), ('EP', pub.get('EP')),
            ('AU', pub.get('AU') or pub.get('authors')), ('KW', pub.get('KW') or pub.get('keywords')),
            ('DE', pub.get('DE')), ('AB', pub.get('AB') or pub.get('abstract')),
            ('N2', pub.get('N2') or pub.get('notes')), ('UR', pub.get('UR')),
            ('L1', pub.get('L1')),('L2', pub.get('L2'))
        ]
        for label, val in indices:
            if val:
                st.markdown(f"**{label}:**")
                show(val)
        # –º–µ—Ç–∞ info –∏–∑ –ø–∏—Å—å–º–∞
        meta = []
        for k in ('folder','from','subject','date','uid'):
            v = pub.get(k)
            if v: meta.append(f"{k.capitalize()}: {clean_val(v)}")
        if meta:
            st.markdown("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:**")
            for line in meta:
                st.markdown(line)

    def _clean_doi(self, doi: str) -> str:
        if not doi: return ''
        doi = str(doi).strip()
        for pref in ['https://doi.org/','http://doi.org/','doi.org/','DOI:','doi:']:
            doi = doi.replace(pref,'')
        return doi.strip()
