"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è Sci.Net.Node
–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞: —Å–µ—Ä–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞-–ª–µ–Ω—Ç–∞, —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π
"""

import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse

SECTION_DIVIDER_STYLE = """
<style>
.card-toc {
  background: #f1f3f5; /* —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è */
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px 18px;
  margin: 12px 0;
}
.card-toc:hover { box-shadow: 0 2px 8px rgba(0,0,0,0.06); }
.card-meta { color:#4d4d4d; font-size:0.95rem; }
.hr-toggle {
  cursor: pointer;
  user-select: none;
  margin: 8px 0 0 0;
  padding: 6px 0;
  display:flex; align-items:center; gap:8px;
  color:#495057;
  border-top: 1px solid #dee2e6; /* –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */
}
.hr-toggle .arrow { transition: transform .2s ease; }
.hr-toggle.open .arrow { transform: rotate(180deg); }
.details-pane {
  background: #fafbfc; /* –±–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω */
  border: 1px solid #eceff1;
  border-radius: 8px;
  padding: 14px 16px;
  margin: 8px 0 2px 0;
}
.badge { background:#e9ecef; border-radius:12px; padding:2px 8px; font-size:0.85rem; }
</style>
"""

class MainPanel:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤ –≤–∏–¥–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ DOI"""

    def __init__(self):
        pass

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            st.markdown("""
            ### –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
            1. üîê –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            2. üìß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–∏—Ö –ø–∏—Å—å–º–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è DOI –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            3. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            4. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –¥–∏–∞–≥—Ä–∞–º–º
            """)
            return

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Å—Ç–∏–ª–∏
        st.markdown(SECTION_DIVIDER_STYLE, unsafe_allow_html=True)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ DOI (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
        unique_publications = self._group_by_unique_doi(publications)
        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {len(unique_publications)}")

        # –õ–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫-–æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
        for doi, pub_data in unique_publications.items():
            self._render_toc_card(pub_data, email_handler)

    # ===== –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ò –ê–ì–†–ï–ì–ê–¶–ò–Ø =====
    def _group_by_unique_doi(self, publications: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        grouped: Dict[str, Dict[str, Any]] = {}
        for pub in publications:
            doi = self._clean_doi(pub.get('doi', ''))
            if not doi:
                continue
            g = grouped.setdefault(doi, {
                'doi': doi,
                'title': '', 'type': '', 'year': '', 'journal': '',
                'first_author': '', 'last_author': '', 'authors': set(),
                'keywords': set(), 'abstract': '', 'notes': [],
                'volume': '', 'issue': '', 'pages': '', 'emails': []
            })
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π: –Ω–µ –±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ [–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö] –∏ html/mailto
            def acceptable(val):
                if not isinstance(val, str):
                    return True
                s = val.strip()
                if not s:
                    return False
                if s.startswith('[') and s.endswith(']'):
                    return False
                if s.startswith('href=') or s.startswith('mailto:'):
                    return False
                return True
            for field in ['title','journal','volume','issue','pages','abstract']:
                v = pub.get(field)
                if v and not g[field] and acceptable(v):
                    g[field] = v
            t = pub.get('type','')
            if t and not g['type'] and acceptable(t):
                g['type'] = t
            y = pub.get('year','')
            if y and not g['year'] and str(y).isdigit() and 1800 <= int(y) <= 2100:
                g['year'] = str(y)
            au = pub.get('authors', [])
            if isinstance(au, list):
                g['authors'].update([a for a in au if acceptable(a)])
                if au and not g['first_author']:
                    g['first_author'] = au[0]
                if len(au) > 1:
                    g['last_author'] = au[-1]
            elif isinstance(au, str) and acceptable(au):
                g['authors'].add(au)
                if not g['first_author']:
                    g['first_author'] = au
            kws = pub.get('keywords', [])
            if isinstance(kws, list):
                g['keywords'].update([k for k in kws if acceptable(k)])
            elif isinstance(kws, str) and acceptable(kws):
                g['keywords'].add(kws)
            note = pub.get('notes','')
            if isinstance(note, str) and acceptable(note) and note not in g['notes']:
                g['notes'].append(note)
            g['emails'].append({
                'folder': pub.get('folder',''), 'from': pub.get('from',''),
                'subject': pub.get('subject',''), 'date': pub.get('date',''), 'uid': pub.get('uid',''),
                'text': pub.get('text',''), 'html': pub.get('html','')
            })
        for g in grouped.values():
            g['authors'] = sorted(list(g['authors']))
            g['keywords'] = sorted(list(g['keywords']))
        return grouped

    def _clean_doi(self, doi: str) -> str:
        if not doi:
            return ''
        s = str(doi).strip()
        for pref in ('https://doi.org/','http://doi.org/','doi.org/','DOI:','doi:'):
            s = s.replace(pref,'')
        return s.strip()

    # ===== –ö–ê–†–¢–û–ß–ö–ê-–û–ì–õ–ê–í–õ–ï–ù–ò–ï =====
    def _render_toc_card(self, pub_data: Dict[str, Any], email_handler=None):
        doi = pub_data['doi']
        title = pub_data.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        meta_bits = []
        if pub_data.get('type'): meta_bits.append(pub_data['type'])
        if pub_data.get('year'): meta_bits.append(pub_data['year'])
        if pub_data.get('journal'): meta_bits.append(pub_data['journal'])
        fa = pub_data.get('first_author')
        la = pub_data.get('last_author')
        if fa and la and fa != la:
            meta_bits.append(f"–ê–≤—Ç–æ—Ä—ã: {fa} ‚Äì {la}")
        elif fa:
            meta_bits.append(f"–ê–≤—Ç–æ—Ä: {fa}")

        st.markdown("<div class='card-toc'>", unsafe_allow_html=True)
        st.markdown(f"**{title}**")
        meta_line = " ‚Ä¢ ".join([b for b in meta_bits if b])
        st.markdown(f"<div class='card-meta'>DOI: <code>{doi}</code> ‚Ä¢ {meta_line}</div>", unsafe_allow_html=True)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
        key = f"details_{doi}"
        is_open = st.toggle("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", key=key, value=False)
        arrow_class = "hr-toggle open" if is_open else "hr-toggle"
        st.markdown(f"<div class='{arrow_class}'><span class='arrow'>‚¨áÔ∏è</span><span>–î–µ—Ç–∞–ª–∏</span></div>", unsafe_allow_html=True)

        if is_open:
            st.markdown("<div class='details-pane'>", unsafe_allow_html=True)
            self._render_details_tabs(pub_data, email_handler)
            st.markdown("</div>", unsafe_allow_html=True)

        st.markdown("</div>", unsafe_allow_html=True)

    # ===== –î–ï–¢–ê–õ–ò =====
    def _render_details_tabs(self, pub_data: Dict[str, Any], email_handler=None):
        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìß –ü–∏—Å—å–º–∞", "üîó –î–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        with tab1:
            self._render_publication_data_tab(pub_data)
        with tab2:
            self._render_emails_tab(pub_data.get('emails', []))
        with tab3:
            self._render_actions_tab(pub_data, email_handler)
        with tab4:
            self._render_stats_tab(pub_data)

    def _render_publication_data_tab(self, pub_data: Dict[str, Any]):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            authors = pub_data.get('authors', [])
            if authors:
                st.markdown("**–ê–≤—Ç–æ—Ä—ã (AU):**")
                for i, author in enumerate(authors[:10]):
                    st.markdown(f"{i+1}. {author}")
                if len(authors) > 10:
                    st.markdown(f"*...–∏ –µ—â–µ {len(authors)-10} –∞–≤—Ç–æ—Ä–æ–≤*")
            for label, field in [("–¢–æ–º (VL)", 'volume'), ("–í—ã–ø—É—Å–∫ (IS)", 'issue'), ("–°—Ç—Ä–∞–Ω–∏—Ü—ã (SP)", 'pages')]:
                v = pub_data.get(field)
                if v:
                    st.markdown(f"**{label}:** {v}")
        with col2:
            st.subheader("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            keywords = pub_data.get('keywords', [])
            if keywords:
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE):**")
                st.markdown(", ".join(keywords[:15]))
                if len(keywords) > 15:
                    st.markdown(f"*...–∏ –µ—â–µ {len(keywords)-15} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*")
            abstract = pub_data.get('abstract', '')
            if abstract:
                st.markdown("**–ê–±—Å—Ç—Ä–∞–∫—Ç (AB):**")
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç"):
                    st.markdown(abstract)
            notes = pub_data.get('notes', [])
            if notes:
                st.markdown("**–ó–∞–º–µ—Ç–∫–∏ (N2/PA):**")
                for i, note in enumerate(notes, 1):
                    st.markdown(f"{i}. {note}")

    def _render_emails_tab(self, emails: List[Dict[str, Any]]):
        st.subheader(f"üìß –ü–∏—Å—å–º–∞ —Å —ç—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π ({len(emails)})")
        if not emails:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        for i, email in enumerate(emails, 1):
            with st.expander(f"–ü–∏—Å—å–º–æ {i}: {email.get('subject','–ë–µ–∑ —Ç–µ–º—ã')[:60]}..."):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**üìÅ –ü–∞–ø–∫–∞:** {email.get('folder','–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                    st.markdown(f"**üë§ –û—Ç –∫–æ–≥–æ:** {email.get('from','–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    st.markdown(f"**üìÖ –î–∞—Ç–∞:** {self._format_date(email.get('date',''))}")
                with col2:
                    st.markdown(f"**üÜî UID:** {email.get('uid','–ù–µ —É–∫–∞–∑–∞–Ω')}")
                txt = email.get('text','')
                if txt:
                    prev = txt[:300] + ("..." if len(txt) > 300 else "")
                    st.markdown("**üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–µ–≤—å—é):**")
                    st.markdown(f"```\n{prev}\n```")

    def _render_actions_tab(self, pub_data: Dict[str, Any], email_handler=None):
        st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        doi = pub_data.get('doi','')
        title = pub_data.get('title','')
        if not doi:
            st.warning("DOI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            return
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã", key=f"m3_{doi}"):
                self._create_request_link("M3_REQUEST", doi, title, email_handler)
            if st.button("üìö PDF —Ñ–∞–π–ª", key=f"pdf_{doi}"):
                self._create_request_link("PDF_REQUEST", doi, title, email_handler)
        with col2:
            if st.button("üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"kw_{doi}"):
                self._create_request_link("KW_REQUEST", doi, title, email_handler)
            if st.button("üìñ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cits_{doi}"):
                self._create_request_link("CITS_REQUEST", doi, title, email_handler)
        with col3:
            st.markdown(f"[üîó DOI.org](https://doi.org/{doi})")
            st.markdown(f"[üéì Google Scholar](https://scholar.google.com/scholar?q={urllib.parse.quote(title)})")
        with col4:
            st.markdown(f"[üìö PubMed](https://pubmed.ncbi.nlm.nih.gov/?term={urllib.parse.quote(title)})")

    def _create_request_link(self, request_type: str, doi: str, title: str, email_handler=None):
        pattern = REQUEST_PATTERNS.get(request_type, "[request]")
        body = f"{pattern} https://doi.org/{doi}"
        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"
        st.success("üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")
        if email_handler and email_handler.connected:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key=f"send_{request_type}_{doi}"):
                if email_handler.send_request_email(title, body):
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    def _format_date(self, date_obj):
        if isinstance(date_obj, datetime):
            return date_obj.strftime('%Y-%m-%d %H:%M')
        elif isinstance(date_obj, str):
            return date_obj
        else:
            return str(date_obj) if date_obj else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
