import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse


class MainPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""

    def __init__(self):
        pass

    def render(self, emails: List[Dict[str, Any]], email_handler=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        emails - —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        """
        if not emails:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(emails)}")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI
        grouped = {}
        for email in emails:
            doi = self.extract_first_doi(email.get('text', ''))
            if not doi:
                continue

            if doi not in grouped:
                grouped[doi] = []
            grouped[doi].append(email)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö DOI
        for doi, group_emails in grouped.items():
            merged_data = self.merge_email_data(group_emails)

            with st.container():
                st.markdown(
                    """<div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background-color: #f9f9f9;">""",
                    unsafe_allow_html=True)

                st.markdown(f"### üìÑ DOI: [{doi}](https://doi.org/{doi})")

                pub_type = merged_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                year = merged_data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')
                title = merged_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                st.markdown(f"**–¢–∏–ø (M3/PY):** {pub_type}")
                st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ (TI):** {title}")
                st.markdown(f"**–ì–æ–¥ (PY):** {year}")

                authors = merged_data.get('authors', [])
                if authors:
                    first_author = authors[0]
                    last_author = authors[-1] if len(authors) > 1 else ''
                    st.markdown(f"**–ü–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ä:** {first_author}")
                    if last_author and last_author != first_author:
                        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Ä:** {last_author}")

                st.markdown("</div>", unsafe_allow_html=True)

    def extract_first_doi(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ DOI –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞"""
        import re
        doi_pattern = r'\b10\.\d{4,9}/[-._;()/:A-Z0-9]+\b'
        matches = re.findall(doi_pattern, text, re.IGNORECASE)
        return matches[0] if matches else ''

    def merge_email_data(self, emails: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –ø–∏—Å–µ–º —Å –æ–¥–Ω–∏–º DOI.
        –ó–Ω–∞—á–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤.
        """
        merged = {
            'type': '',
            'year': '',
            'title': '',
            'authors': []
        }

        for email in emails:
            # –ü–æ–ª—É—á–∞–µ–º RIS –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∏—Å—å–º–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            ris_data = email.get('ris_data', {})

            # –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (M3, –µ—Å–ª–∏ –Ω–µ—Ç - TY)
            type_val = ris_data.get('M3') or ris_data.get('TY')
            if type_val and not merged['type']:
                merged['type'] = type_val

            # –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ PY
            year_val = ris_data.get('PY')
            if year_val and not merged['year']:
                merged['year'] = year_val

            # –ù–∞–∑–≤–∞–Ω–∏–µ TI
            title_val = ris_data.get('TI')
            if title_val and not merged['title']:
                merged['title'] = title_val

            # –ê–≤—Ç–æ—Ä—ã AU - –±–µ—Ä–µ–º –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ–Ω
            authors_val = ris_data.get('AU')
            if authors_val:
                if isinstance(authors_val, list):
                    merged['authors'] = authors_val
                else:
                    merged['authors'] = [authors_val]

        return merged
