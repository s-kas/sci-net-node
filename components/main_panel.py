"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è Sci.Net.Node
"""

import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse

class MainPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""

    def __init__(self):
        pass

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""

        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            st.markdown("""
            ### –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
            1. üîê –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            2. üìß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–∏—Ö –ø–∏—Å—å–º–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è DOI –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            3. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            4. üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –¥–∏–∞–≥—Ä–∞–º–º
            """)
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {len(publications)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI
        unique_publications = self._group_by_doi(publications)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        for doi, pub_group in unique_publications.items():
            self._render_publication_card(pub_group, email_handler)

    def _group_by_doi(self, publications: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI"""
        grouped = {}

        for pub in publications:
            doi = pub.get('doi', '')
            if doi:
                if doi not in grouped:
                    grouped[doi] = []
                grouped[doi].append(pub)

        return grouped

    def _render_publication_card(self, pub_group: List[Dict[str, Any]], email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        main_pub = pub_group[0]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø–∏—Å–µ–º –≥—Ä—É–ø–ø—ã
        merged_data = self._merge_publication_data(pub_group)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        with st.container():
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–∞–º–∫–æ–π
            st.markdown("""
                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background-color: #f9f9f9;">
            """, unsafe_allow_html=True)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            title = merged_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            doi = merged_data.get('doi', '')

            col1, col2 = st.columns([4, 1])

            with col1:
                st.markdown(f"### üìÑ {title}")
                st.markdown(f"**DOI:** [{doi}](https://doi.org/{doi})")

            with col2:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                expanded = st.checkbox("–î–µ—Ç–∞–ª–∏", key=f"details_{doi}")

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            col1, col2 = st.columns(2)

            with col1:
                # –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                pub_type = merged_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                st.markdown(f"**–¢–∏–ø (M3/TY):** {pub_type}")

                # –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏  
                year = merged_data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')
                st.markdown(f"**–ì–æ–¥ (PY):** {year}")

                # –ñ—É—Ä–Ω–∞–ª
                journal = merged_data.get('journal', '–ù–µ —É–∫–∞–∑–∞–Ω')
                if journal:
                    st.markdown(f"**–ñ—É—Ä–Ω–∞–ª (T2):** {journal}")

            with col2:
                # –ê–≤—Ç–æ—Ä—ã
                authors = merged_data.get('authors', [])
                if authors:
                    first_author = authors[0]
                    last_author = authors[-1] if len(authors) > 1 else ''

                    st.markdown(f"**–ü–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ä:** {first_author}")
                    if last_author and last_author != first_author:
                        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Ä:** {last_author}")

                    if len(authors) > 2:
                        st.markdown(f"*–∏ –µ—â–µ {len(authors)-1} –∞–≤—Ç–æ—Ä–æ–≤*")

            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if expanded:
                st.markdown("---")
                self._render_expanded_details(merged_data, pub_group, email_handler)

            st.markdown("</div>", unsafe_allow_html=True)

    def _merge_publication_data(self, pub_group: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö –ø–∏—Å–µ–º –≥—Ä—É–ø–ø—ã"""

        merged = {
            'doi': '',
            'title': '',
            'type': '',
            'year': '',
            'authors': [],
            'journal': '',
            'keywords': [],
            'abstract': '',
            'notes': '',
            'urls': [],
            'emails': []
        }

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø–∏—Å–µ–º
        all_authors = set()
        all_keywords = set()

        for pub in pub_group:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            for field in ['doi', 'title', 'type', 'year', 'journal', 'abstract']:
                if not merged[field] and pub.get(field):
                    merged[field] = pub[field]

            # –ê–≤—Ç–æ—Ä—ã - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            pub_authors = pub.get('authors', [])
            if isinstance(pub_authors, list):
                all_authors.update(pub_authors)
            elif pub_authors:
                all_authors.add(pub_authors)

            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            pub_keywords = pub.get('keywords', [])
            if isinstance(pub_keywords, list):
                all_keywords.update(pub_keywords)
            elif pub_keywords:
                all_keywords.add(pub_keywords)

            # –ó–∞–º–µ—Ç–∫–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            if pub.get('notes'):
                if merged['notes']:
                    merged['notes'] += f"; {pub['notes']}"
                else:
                    merged['notes'] = pub['notes']

            # URL –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Å—å–º–∞—Ö
            merged['emails'].append({
                'folder': pub.get('folder', ''),
                'from': pub.get('from', ''),
                'subject': pub.get('subject', ''),
                'date': pub.get('date', ''),
                'uid': pub.get('uid', '')
            })

        merged['authors'] = list(all_authors)
        merged['keywords'] = list(all_keywords)

        return merged

    def _render_expanded_details(self, merged_data: Dict[str, Any], 
                                pub_group: List[Dict[str, Any]], 
                                email_handler=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìß –ü–∏—Å—å–º–∞", "üîó –î–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

        with tab1:
            self._render_publication_data_tab(merged_data)

        with tab2:
            self._render_emails_tab(merged_data['emails'])

        with tab3:
            self._render_actions_tab(merged_data, email_handler)

        with tab4:
            self._render_stats_tab(pub_group)

    def _render_publication_data_tab(self, merged_data: Dict[str, Any]):
        """–¢–∞–± —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            # –í—Å–µ –∞–≤—Ç–æ—Ä—ã
            authors = merged_data.get('authors', [])
            if authors:
                st.markdown("**–ê–≤—Ç–æ—Ä—ã (AU):**")
                for author in authors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    st.markdown(f"- {author}")
                if len(authors) > 10:
                    st.markdown(f"*...–∏ –µ—â–µ {len(authors)-10} –∞–≤—Ç–æ—Ä–æ–≤*")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            volume = merged_data.get('volume', '')
            issue = merged_data.get('issue', '') 
            pages = merged_data.get('pages', '')

            if volume:
                st.markdown(f"**–¢–æ–º (VL):** {volume}")
            if issue:
                st.markdown(f"**–í—ã–ø—É—Å–∫ (IS):** {issue}")
            if pages:
                st.markdown(f"**–°—Ç—Ä–∞–Ω–∏—Ü—ã (SP):** {pages}")

        with col2:
            st.subheader("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = merged_data.get('keywords', [])
            if keywords:
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE):**")
                for keyword in keywords[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                    st.markdown(f"- {keyword}")
                if len(keywords) > 15:
                    st.markdown(f"*...–∏ –µ—â–µ {len(keywords)-15} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤*")

            # –ê–±—Å—Ç—Ä–∞–∫—Ç
            abstract = merged_data.get('abstract', '')
            if abstract:
                st.markdown("**–ê–±—Å—Ç—Ä–∞–∫—Ç (AB):**")
                st.markdown(abstract[:500] + ("..." if len(abstract) > 500 else ""))

            # –ó–∞–º–µ—Ç–∫–∏
            notes = merged_data.get('notes', '')
            if notes:
                st.markdown("**–ó–∞–º–µ—Ç–∫–∏ (N2/PA):**")
                st.markdown(notes)

    def _render_emails_tab(self, emails: List[Dict[str, Any]]):
        """–¢–∞–± —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∏—Å–µ–º"""

        st.subheader(f"üìß –ü–∏—Å—å–º–∞ ({len(emails)})")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∏—Å–µ–º
        emails_data = []
        for email in emails:
            emails_data.append({
                '–ü–∞–ø–∫–∞': email.get('folder', ''),
                '–û—Ç –∫–æ–≥–æ': email.get('from', ''),
                '–¢–µ–º–∞': email.get('subject', '')[:50] + ("..." if len(email.get('subject', '')) > 50 else ''),
                '–î–∞—Ç–∞': email.get('date', '').strftime('%Y-%m-%d %H:%M') if isinstance(email.get('date'), datetime) else str(email.get('date', ''))
            })

        df = pd.DataFrame(emails_data)
        st.dataframe(df, use_container_width=True)

    def _render_actions_tab(self, merged_data: Dict[str, Any], email_handler=None):
        """–¢–∞–± —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""

        st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")

        doi = merged_data.get('doi', '')
        title = merged_data.get('title', '')

        if not doi:
            st.warning("DOI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            return

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Sci.Net.Core
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("**üìÑ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã", key=f"m3_{doi}"):
                self._create_request_link("M3_REQUEST", doi, title, email_handler)

            if st.button(f"üìö PDF —Ñ–∞–π–ª", key=f"pdf_{doi}"):
                self._create_request_link("PDF_REQUEST", doi, title, email_handler)

            if st.button(f"üî¨ PubMed", key=f"pmid_{doi}"):
                self._create_request_link("PMID_REQUEST", doi, title, email_handler)

        with col2:
            st.markdown("**üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"kw_{doi}"):
                self._create_request_link("KW_REQUEST", doi, title, email_handler)

            if st.button(f"üìñ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cits_{doi}"):
                self._create_request_link("CITS_REQUEST", doi, title, email_handler)

        with col3:
            st.markdown("**‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:**")

            if st.button(f"üìù –î–æ–±–∞–≤–∏—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç", key=f"abs_{doi}"):
                self._create_insert_link("INSERT_ABSTRACT", title)

            if st.button(f"üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"keys_{doi}"):
                self._create_insert_link("INSERT_KEYWORDS", title)

            if st.button(f"üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", key=f"notes_{doi}"):
                self._create_insert_link("INSERT_NOTES", title)

        # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
        st.markdown("**üåê –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏:**")

        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"[üîó DOI.org](https://doi.org/{doi})")
        with col2:
            st.markdown(f"[üéì Google Scholar](https://scholar.google.com/scholar?q={urllib.parse.quote(title)})")
        with col3:
            st.markdown(f"[üìö PubMed](https://pubmed.ncbi.nlm.nih.gov/?term={urllib.parse.quote(title)})")

    def _render_stats_tab(self, pub_group: List[Dict[str, Any]]):
        """–¢–∞–± —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""

        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∏—Å—å–º–∞–º")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º
        folders = [pub.get('folder', '') for pub in pub_group]
        folder_counts = pd.Series(folders).value_counts()

        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–ø–∫–∞–º:**")
        for folder, count in folder_counts.items():
            st.markdown(f"- {folder}: {count} –ø–∏—Å–µ–º")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
        senders = [pub.get('from', '') for pub in pub_group]
        sender_counts = pd.Series(senders).value_counts()

        st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã:**")
        for sender, count in sender_counts.head(5).items():
            st.markdown(f"- {sender}: {count} –ø–∏—Å–µ–º")

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        dates = [pub.get('date') for pub in pub_group if pub.get('date')]
        if dates:
            min_date = min(dates)
            max_date = max(dates)
            st.markdown(f"**–ü–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:** {min_date.strftime('%Y-%m-%d')} - {max_date.strftime('%Y-%m-%d')}")

    def _create_request_link(self, request_type: str, doi: str, title: str, email_handler=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""

        pattern = REQUEST_PATTERNS.get(request_type, "[request]")
        body = f"{pattern} https://doi.org/{doi}"

        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"

        st.success(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω email_handler, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        if email_handler and email_handler.connected:
            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key=f"send_{request_type}_{doi}"):
                if email_handler.send_request_email(title, body):
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    def _create_insert_link(self, insert_type: str, title: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""

        body_templates = {
            "INSERT_ABSTRACT": "PDF could be attached to this mail\n\nAB - [–≤—Å—Ç–∞–≤—å—Ç–µ –∞–±—Å—Ç—Ä–∞–∫—Ç –∑–¥–µ—Å—å]\n\nBest regards,",
            "INSERT_KEYWORDS": "DE - [–≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]\n\nBest regards,", 
            "INSERT_NOTES": "PA - [–≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –∑–¥–µ—Å—å]\n\nBest regards,"
        }

        body = body_templates.get(insert_type, "Best regards,")

        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"

        st.success(f"üîó –®–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ]({mailto_link})")
