"""
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è Sci.Net.Node
–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞: –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–æ–º —Ñ–æ–Ω–µ, –¥–µ—Ç–∞–ª–∏ –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é –Ω–∞ —Å–≤–µ—Ç–ª–æ‚Äë—Å–µ—Ä–æ–π –≤—Å—Ç–∞–≤–∫–µ
"""

import streamlit as st
from typing import List, Dict, Any
import pandas as pd
from datetime import datetime
from config import REQUEST_PATTERNS, SCINET_CORE_EMAIL
import urllib.parse
import re

# –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏: –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–µ—Ä—ã–π), –¥–µ—Ç–∞–ª–∏ (—Å–≤–µ—Ç–ª–æ‚Äë—Å–µ—Ä—ã–π);
# –æ–±—â–∞—è —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–π —Ç–µ–º–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CUSTOM_CSS = """
<style>
.card-toc { background:#3a3a3a; border:1px solid #4a4a4a; border-radius:10px; padding:16px 18px; margin:14px 0; color:#e9e9e9; }
.card-toc:hover { box-shadow:0 2px 10px rgba(0,0,0,0.25); }
.card-title { font-weight:600; font-size:1.06rem; color:#ffffff; }
.card-meta  { color:#c7c7c7; font-size:0.92rem; }
.details-pane { background:#f2f3f5; border:1px solid #e0e0e0; border-radius:10px; padding:14px 16px; margin:8px 0 0 0; color:#212529; }
.badge { background:#e9ecef; border-radius:12px; padding:2px 8px; font-size:0.85rem; color:#343a40; }
.slider-hint { color:#c7c7c7; font-size:0.86rem; margin-top:6px; }
</style>
"""

HTML_TAG_RE = re.compile(r"<[^>]+>")
MAILTO_RE = re.compile(r"^(mailto:|href=)", re.IGNORECASE)
BRACKETS_RE = re.compile(r"^\s*\[.*\]\s*$")

class MainPanel:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: –ª–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ (–æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ) —Ç–æ–ª—å–∫–æ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º DOI"""

    def render(self, publications: List[Dict[str, Any]], email_handler=None):
        if not publications:
            st.info("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å DOI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            st.markdown("""
            1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø–æ—á—Ç–µ ‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∏—Å—å–º–∞
            2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥ ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞¬ª
            3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã
            """)
            return

        st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

        unique = self._group_by_unique_doi(publications)
        st.header(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {len(unique)}")

        for doi, pub in unique.items():
            self._render_toc_card(pub, email_handler)

    # ===== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è =====
    def _group_by_unique_doi(self, publications: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
        grouped: Dict[str, Dict[str, Any]] = {}
        for p in publications:
            doi = self._clean_doi(p.get('doi',''))
            if not doi:
                continue
            g = grouped.setdefault(doi, {
                'doi': doi,
                'title':'', 'type':'', 'year':'', 'journal':'',
                'first_author':'', 'last_author':'', 'authors': [], 'keywords': [],
                'volume':'', 'issue':'', 'pages':'', 'abstract':'', 'notes': [],
                'emails': []
            })
            # –û–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ–ª—è: –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ HTML –∏ –±–µ–∑ [ ... ]
            for field in ['title','journal','volume','issue','pages','abstract','type','year']:
                v = p.get(field, '')
                if v and not g[field] and self._acceptable(v):
                    g[field] = self._strip_html(v)
            # –ê–≤—Ç–æ—Ä—ã/–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ
            au = p.get('authors', [])
            if isinstance(au, list):
                for a in au:
                    if self._acceptable(a):
                        g['authors'].append(self._strip_html(a))
            elif au and self._acceptable(au):
                g['authors'].append(self._strip_html(au))
            # –ü–µ—Ä–≤—ã–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Ä
            if g['authors']:
                g['first_author'] = g['first_author'] or g['authors'][0]
                if len(g['authors'])>1:
                    g['last_author'] = g['authors'][-1]
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            kws = p.get('keywords', [])
            if isinstance(kws, list):
                for k in kws:
                    if self._acceptable(k):
                        g['keywords'].append(self._strip_html(k))
            elif kws and self._acceptable(kws):
                g['keywords'].append(self._strip_html(kws))
            # –ó–∞–º–µ—Ç–∫–∏
            note = p.get('notes','')
            if note and self._acceptable(note):
                g['notes'].append(self._strip_html(note))
            # –ü–∏—Å—å–º–∞
            g['emails'].append({
                'folder': p.get('folder',''), 'from': p.get('from',''),
                'subject': self._strip_html(p.get('subject','')), 'date': p.get('date',''), 'uid': p.get('uid',''),
                'text': self._strip_html(p.get('text',''))
            })
        # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
        for g in grouped.values():
            g['authors'] = list(dict.fromkeys(g['authors']))
            g['keywords'] = list(dict.fromkeys(g['keywords']))
        return grouped

    # ===== –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏ =====
    def _render_toc_card(self, pub: Dict[str, Any], email_handler=None):
        doi = pub['doi']
        title = pub.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        pub_type = pub.get('type') or '–ù–µ —É–∫–∞–∑–∞–Ω'
        year = pub.get('year') or '–ù–µ —É–∫–∞–∑–∞–Ω'
        journal = pub.get('journal') or '–ù–µ —É–∫–∞–∑–∞–Ω'
        fa = pub.get('first_author'); la = pub.get('last_author')
        authors_line = ''
        if fa and la and fa!=la:
            authors_line = f"–ê–≤—Ç–æ—Ä—ã: {fa} ‚Äì {la}"
        elif fa:
            authors_line = f"–ê–≤—Ç–æ—Ä: {fa}"

        st.markdown("<div class='card-toc'>", unsafe_allow_html=True)
        st.markdown(f"<div class='card-title'>{self._strip_html(title)}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='card-meta'>DOI: <code>{doi}</code> ‚Ä¢ {self._strip_html(pub_type)} ‚Ä¢ {self._strip_html(str(year))} ‚Ä¢ {self._strip_html(journal)}</div>", unsafe_allow_html=True)
        if authors_line:
            st.markdown(f"<div class='card-meta'>{self._strip_html(authors_line)}</div>", unsafe_allow_html=True)

        expanded = st.toggle("–î–µ—Ç–∞–ª–∏", key=f"details_{doi}")
        st.markdown("<div class='slider-hint'>–ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å</div>", unsafe_allow_html=True)
        if expanded:
            st.markdown("<div class='details-pane'>", unsafe_allow_html=True)
            self._render_details_tabs(pub, email_handler)
            st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

    def _render_details_tabs(self, d: Dict[str, Any], email_handler=None):
        tab1, tab2, tab3, tab4 = st.tabs(["üìã –î–∞–Ω–Ω—ã–µ", "üìß –ü–∏—Å—å–º–∞", "üîó –î–µ–π—Å—Ç–≤–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        with tab1:
            self._render_publication_data_tab(d)
        with tab2:
            self._render_emails_tab(d.get('emails', []))
        with tab3:
            self._render_actions_tab(d, email_handler)
        with tab4:
            self._render_stats_tab(d)

    def _render_publication_data_tab(self, d: Dict[str, Any]):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            authors = d.get('authors', [])
            if authors:
                st.markdown("**–ê–≤—Ç–æ—Ä—ã (AU):**")
                for i, a in enumerate(authors[:12]):
                    st.markdown(f"{i+1}. {a}")
                if len(authors)>12:
                    st.markdown(f"‚Ä¶–∏ –µ—â–µ {len(authors)-12} –∞–≤—Ç–æ—Ä–æ–≤")
            for label, key in [("–¢–æ–º (VL)", 'volume'), ("–í—ã–ø—É—Å–∫ (IS)", 'issue'), ("–°—Ç—Ä–∞–Ω–∏—Ü—ã (SP)", 'pages')]:
                v = d.get(key, '')
                if v:
                    st.markdown(f"**{label}:** {v}")
        with col2:
            st.subheader("üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            kws = d.get('keywords', [])
            if kws:
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE):**")
                st.markdown(", ".join(kws[:20]))
                if len(kws)>20:
                    st.markdown(f"‚Ä¶–∏ –µ—â–µ {len(kws)-20} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            if d.get('abstract'):
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç"):
                    st.markdown(d['abstract'])
            notes = d.get('notes', [])
            if notes:
                st.markdown("**–ó–∞–º–µ—Ç–∫–∏ (N2/PA):**")
                for i, n in enumerate(notes,1):
                    st.markdown(f"{i}. {n}")

    def _render_emails_tab(self, emails: List[Dict[str, Any]]):
        st.subheader(f"üìß –ü–∏—Å—å–º–∞ ({len(emails)})")
        if not emails:
            st.info("–ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        for i, e in enumerate(emails, 1):
            with st.expander(f"–ü–∏—Å—å–º–æ {i}: {e.get('subject','–ë–µ–∑ —Ç–µ–º—ã')[:70]}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**üìÅ –ü–∞–ø–∫–∞:** {e.get('folder','')}")
                    st.markdown(f"**üë§ –û—Ç –∫–æ–≥–æ:** {e.get('from','')}")
                    st.markdown(f"**üìÖ –î–∞—Ç–∞:** {self._format_date(e.get('date',''))}")
                with col2:
                    st.markdown(f"**üÜî UID:** {e.get('uid','')}")
                if e.get('text'):
                    preview = e['text'][:500] + ("‚Ä¶" if len(e['text'])>500 else "")
                    st.markdown("**üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:**")
                    st.code(preview)

    def _render_actions_tab(self, d: Dict[str, Any], email_handler=None):
        st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        doi = d.get('doi',''); title = d.get('title','')
        if not doi:
            st.warning("DOI –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        c1, c2, c3 = st.columns(3)
        with c1:
            if st.button("üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã", key=f"m3_{doi}"):
                self._create_request_link("M3_REQUEST", doi, title, email_handler)
            if st.button("üìö PDF —Ñ–∞–π–ª", key=f"pdf_{doi}"):
                self._create_request_link("PDF_REQUEST", doi, title, email_handler)
            if st.button("üî¨ PubMed ID", key=f"pmid_{doi}"):
                self._create_request_link("PMID_REQUEST", doi, title, email_handler)
        with c2:
            if st.button("üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", key=f"kw_{doi}"):
                self._create_request_link("KW_REQUEST", doi, title, email_handler)
            if st.button("üìñ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key=f"cits_{doi}"):
                self._create_request_link("CITS_REQUEST", doi, title, email_handler)
        with c3:
            st.markdown(f"[DOI](https://doi.org/{doi})  |  [Scholar](https://scholar.google.com/scholar?q={urllib.parse.quote(title)})  |  [PubMed](https://pubmed.ncbi.nlm.nih.gov/?term={urllib.parse.quote(title)})  |  [Crossref](https://search.crossref.org/?q={urllib.parse.quote(title)})")

    # ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====
    def _clean_doi(self, doi: str) -> str:
        if not doi: return ''
        s = str(doi).strip()
        for pref in ['https://doi.org/','http://doi.org/','doi.org/','DOI:','doi:']:
            s = s.replace(pref,'')
        return s.strip()

    def _strip_html(self, s: Any) -> str:
        if s is None: return ''
        s = str(s)
        s = HTML_TAG_RE.sub('', s)
        s = s.replace('mailto:','').replace('href=','')
        return s.strip()

    def _acceptable(self, v: Any) -> bool:
        if v is None: return False
        if isinstance(v, str):
            s = v.strip()
            if not s: return False
            if BRACKETS_RE.match(s): return False
            if MAILTO_RE.match(s): return False
        return True

    def _format_date(self, dt):
        if isinstance(dt, datetime):
            return dt.strftime('%Y-%m-%d %H:%M')
        return str(dt)

    def _create_request_link(self, request_type: str, doi: str, title: str, email_handler=None):
        pattern = REQUEST_PATTERNS.get(request_type, "[request]")
        body = f"{pattern} https://doi.org/{doi}"
        mailto_link = f"mailto:{SCINET_CORE_EMAIL}?subject={urllib.parse.quote(title)}&body={urllib.parse.quote(body)}"
        st.markdown(f"[üìß –û—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ]({mailto_link})")
        if email_handler and email_handler.connected and st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key=f"send_{request_type}_{doi}"):
            if email_handler.send_request_email(title, body):
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
