"""
Move 'Load emails' button below 'Mailbox folders' selection and set default folders to only INBOX and Sent.
"""
import streamlit as st
from datetime import datetime, date
from typing import List, Dict, Any
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter
import pandas as pd

class SidebarPanel:
    def __init__(self, publications: List[Dict[str, Any]]):
        self.publications = publications
        st.markdown("""
        <style>
        .css-1d391kg { background-color: #f8f9fa !important; }
        .css-1d391kg h2, .css-1d391kg h3 { color:#1a1a1a!important; font-weight:600!important; }
        .css-1d391kg label { color:#333!important; font-weight:500!important; }
        .css-1d391kg .stButton > button { width:100%; background:#007bff; color:#fff; border:none; border-radius:6px; font-weight:500; margin:2px 0; }
        .css-1d391kg .stButton > button:hover { background:#0056b3; }
        @media (prefers-color-scheme: dark) { .css-1d391kg { background:#2a2a2a!important; } .css-1d391kg h2, .css-1d391kg h3 { color:#fff!important; } .css-1d391kg label { color:#e4e4e4!important; } }
        </style>
        """, unsafe_allow_html=True)

    def render_connection_section(self) -> Dict[str, str]:
        st.sidebar.header("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ")
        email = st.sidebar.text_input("Email –∞–¥—Ä–µ—Å", placeholder="username@mail.ru", help="–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã Mail.ru")
        password = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password", help="–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞")
        connect_button = st.sidebar.button("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", type="primary")
        return {'email': email, 'password': password, 'connect': connect_button}

    def _get_mailbox_bounds(self) -> tuple[date, date]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã) –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ.
        –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –≥–æ–¥ –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–≥–æ–¥–Ω—è.
        """
        today = date.today()
        if not self.publications:
            return today.replace(year=today.year-1), today
        dates = []
        for p in self.publications:
            d = p.get('date')
            if isinstance(d, str):
                try:
                    from dateutil import parser
                    d = parser.parse(d).date()
                except Exception:
                    d = None
            elif isinstance(d, datetime):
                d = d.date()
            if isinstance(d, date):
                dates.append(d)
        if not dates:
            return today.replace(year=today.year-1), today
        return min(dates), today

    def render_filters_section(self, folders: List[str]) -> Dict[str, Any]:
        st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–∞–º - —Ç–æ–ª—å–∫–æ INBOX –∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_folders = []
        for folder in folders:
            if folder in ['INBOX', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', 'Sent'] or 'sent' in folder.lower() or 'inbox' in folder.lower():
                default_folders.append(folder)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–ø–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ
        if not default_folders and folders:
            default_folders = folders[:2] if len(folders) >= 2 else folders
        
        selected_folders = st.sidebar.multiselect(
            "–ü–∞–ø–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞", 
            options=folders, 
            default=default_folders, 
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Å–µ–º"
        )

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º ‚Äî –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        load_click = st.sidebar.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞", type="primary")

        # –ü–µ—Ä–∏–æ–¥
        st.sidebar.subheader("üìÖ –ü–µ—Ä–∏–æ–¥")
        default_from, default_to = self._get_mailbox_bounds()
        col1, col2 = st.sidebar.columns(2)
        with col1:
            date_from = st.date_input("–° –¥–∞—Ç—ã", value=default_from, help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        with col2:
            date_to = st.date_input("–î–æ –¥–∞—Ç—ã", value=default_to, help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        # RIS —Ñ–∏–ª—å—Ç—Ä—ã
        st.sidebar.subheader("üìã RIS –ø–æ–ª—è")
        unique_types = self._get_unique_field_values('type')
        unique_years = self._get_unique_field_values('year')
        selected_types = st.sidebar.multiselect("–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (M3/TY)", options=unique_types, help="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã")
        selected_years = st.sidebar.multiselect("–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (PY)", options=sorted(unique_years, reverse=True), help="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        author_search = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É (AU)", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞...", help="–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        title_search = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (TI)", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...", help="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        keywords_search = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (KW/DE)", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...", help="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ –∫–ª–∏–∫–µ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–º–µ—Å—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        return {
            'folders': selected_folders,
            'date_from': date_from,
            'date_to': date_to,
            'types': selected_types,
            'years': selected_years,
            'author_search': author_search,
            'title_search': title_search,
            'keywords_search': keywords_search,
            'load_click': load_click
        }

    def render_analytics_section(self, filtered_publications: List[Dict[str, Any]]):
        st.sidebar.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        if not filtered_publications:
            st.sidebar.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        total_pubs = len(filtered_publications)
        unique_dois = len(set(pub.get('doi', '') for pub in filtered_publications if pub.get('doi')))
        st.sidebar.metric("–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", total_pubs)
        st.sidebar.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö DOI", unique_dois)
        
        st.sidebar.subheader("üìà –î–∏–∞–≥—Ä–∞–º–º—ã")
        analysis_field = st.sidebar.selectbox(
            "–ü–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            options=['type','year','keywords'], 
            format_func=lambda x:{
                'type':'–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (TY/M3)',
                'year':'–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (PY)',
                'keywords':'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE)'
            }[x]
        )
        
        if st.sidebar.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ—Ç—ã", key="frequency_chart"):
            self._show_frequency_chart(filtered_publications, analysis_field)
        
        if st.sidebar.button("üåü –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", key="concepts_chart"):
            self._show_concepts_sankey(filtered_publications)
        
        st.sidebar.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        if st.sidebar.button("üìÑ –°–∫–∞—á–∞—Ç—å RIS"):
            self._export_to_ris(filtered_publications)
        if st.sidebar.button("üìä –°–∫–∞—á–∞—Ç—å CSV"):
            self._export_to_csv(filtered_publications)

    def _get_unique_field_values(self, field: str) -> List[str]:
        values = set()
        for pub in self.publications:
            value = pub.get(field)
            if isinstance(value, list):
                values.update(str(v) for v in value if v)
            elif value:
                values.add(str(value))
        return sorted(list(values))

    def _show_frequency_chart(self, publications: List[Dict[str, Any]], field: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —á–∞—Å—Ç–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
        values = []
        for pub in publications:
            value = pub.get(field)
            if isinstance(value, list):
                values.extend([str(v) for v in value if v])
            elif value:
                values.append(str(value))
        
        if not values:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è {field}")
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç
        freq_counter = Counter(values)
        top_values = freq_counter.most_common(10)  # –¢–æ–ø-10
        
        if not top_values:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        labels, counts = zip(*top_values)
        
        fig = px.bar(
            x=list(counts),
            y=list(labels),
            orientation='h',
            title=f"–¢–æ–ø-10 {field}",
            labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'y': field.title()}
        )
        fig.update_layout(height=400)
        
        st.plotly_chart(fig, use_container_width=True)

    def _show_concepts_sankey(self, publications: List[Dict[str, Any]]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Sankey –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        author_keyword_pairs = []
        
        for pub in publications:
            authors = pub.get('authors', []) or pub.get('AU', [])
            keywords = pub.get('keywords', []) or pub.get('KW', []) or pub.get('DE', [])
            
            if not isinstance(authors, list):
                authors = [authors] if authors else []
            if not isinstance(keywords, list):
                keywords = [keywords] if keywords else []
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
            first_author = authors[0] if authors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
            top_keywords = keywords[:3] if keywords else ["–ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"]
            
            for keyword in top_keywords:
                author_keyword_pairs.append((str(first_author), str(keyword)))
        
        if not author_keyword_pairs:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–≤—è–∑–µ–π")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã —Å–≤—è–∑–µ–π
        pair_counter = Counter(author_keyword_pairs)
        top_pairs = pair_counter.most_common(15)  # –¢–æ–ø-15 —Å–≤—è–∑–µ–π
        
        # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è Sankey
        all_nodes = set()
        for (author, keyword), count in top_pairs:
            all_nodes.add(f"–ê–≤—Ç–æ—Ä: {author}")
            all_nodes.add(f"–ö–°: {keyword}")
        
        node_list = list(all_nodes)
        node_dict = {node: i for i, node in enumerate(node_list)}
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
        sources = []
        targets = []
        values = []
        
        for (author, keyword), count in top_pairs:
            source_idx = node_dict[f"–ê–≤—Ç–æ—Ä: {author}"]
            target_idx = node_dict[f"–ö–°: {keyword}"]
            sources.append(source_idx)
            targets.append(target_idx)
            values.append(count)
        
        # –°–æ–∑–¥–∞–µ–º Sankey –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = go.Figure(data=[go.Sankey(
            node=dict(
                pad=15,
                thickness=20,
                line=dict(color="black", width=0.5),
                label=node_list,
                color="lightblue"
            ),
            link=dict(
                source=sources,
                target=targets,
                value=values
            )
        )])
        
        fig.update_layout(
            title_text="–°–≤—è–∑–∏ –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
            font_size=10,
            height=600
        )
        
        st.plotly_chart(fig, use_container_width=True)

    def _export_to_ris(self, publications: List[Dict[str, Any]]):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç RIS"""
        if not publications:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        ris_content = []
        
        for pub in publications:
            ris_content.append("TY  - JOUR")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = pub.get('title') or pub.get('TI') or pub.get('subject', '')
            if title:
                ris_content.append(f"TI  - {title}")
            
            # –ê–≤—Ç–æ—Ä—ã
            authors = pub.get('authors', []) or pub.get('AU', [])
            if isinstance(authors, list):
                for author in authors:
                    if author:
                        ris_content.append(f"AU  - {author}")
            elif authors:
                ris_content.append(f"AU  - {authors}")
            
            # –ì–æ–¥
            year = pub.get('year') or pub.get('PY')
            if year:
                ris_content.append(f"PY  - {year}")
            
            # –ñ—É—Ä–Ω–∞–ª
            journal = pub.get('journal') or pub.get('T2')
            if journal:
                ris_content.append(f"T2  - {journal}")
            
            # DOI
            doi = pub.get('doi') or pub.get('DO')
            if doi:
                ris_content.append(f"DO  - {doi}")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = pub.get('keywords', []) or pub.get('KW', []) or pub.get('DE', [])
            if isinstance(keywords, list):
                for keyword in keywords:
                    if keyword:
                        ris_content.append(f"KW  - {keyword}")
            elif keywords:
                ris_content.append(f"KW  - {keywords}")
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
            abstract = pub.get('abstract') or pub.get('AB') or pub.get('N2')
            if abstract:
                ris_content.append(f"AB  - {abstract}")
            
            ris_content.append("ER  - ")
            ris_content.append("")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        ris_text = "\n".join(ris_content)
        
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å RIS —Ñ–∞–π–ª",
            data=ris_text,
            file_name=f"sci_net_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.ris",
            mime="application/x-research-info-systems"
        )

    def _export_to_csv(self, publications: List[Dict[str, Any]]):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç CSV"""
        if not publications:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
        csv_data = []
        
        for pub in publications:
            row = {
                'Title': pub.get('title') or pub.get('TI') or pub.get('subject', ''),
                'Authors': ', '.join(pub.get('authors', []) or pub.get('AU', []) if isinstance(pub.get('authors') or pub.get('AU', []), list) else [pub.get('authors') or pub.get('AU', '')]),
                'Year': pub.get('year') or pub.get('PY', ''),
                'Journal': pub.get('journal') or pub.get('T2', ''),
                'DOI': pub.get('doi') or pub.get('DO', ''),
                'Type': pub.get('type') or pub.get('M3') or pub.get('TY', ''),
                'Keywords': ', '.join(pub.get('keywords', []) or pub.get('KW', []) or pub.get('DE', []) if isinstance(pub.get('keywords') or pub.get('KW', []) or pub.get('DE', []), list) else [pub.get('keywords') or pub.get('KW') or pub.get('DE', '')]),
                'Abstract': pub.get('abstract') or pub.get('AB') or pub.get('N2', ''),
                'Volume': pub.get('VL', ''),
                'Issue': pub.get('IS', ''),
                'Pages': pub.get('SP', ''),
                'URL': pub.get('UR') or pub.get('L1') or pub.get('L2', ''),
                'Folder': pub.get('folder', ''),
                'Email_From': pub.get('from', ''),
                'Email_Date': pub.get('date', ''),
                'PDF_Count': len(pub.get('pdf_attachments', []))
            }
            csv_data.append(row)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(csv_data)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        csv_buffer = df.to_csv(index=False, encoding='utf-8-sig')
        
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
            data=csv_buffer,
            file_name=f"sci_net_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )