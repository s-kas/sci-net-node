# –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
sidebar_content = '''"""
–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è Sci.Net.Node
"""

import streamlit as st
from datetime import datetime, date
from typing import List, Dict, Any
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter
import pandas as pd

class SidebarPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, publications: List[Dict[str, Any]]):
        self.publications = publications
    
    def render_connection_section(self) -> Dict[str, str]:
        """–°–µ–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ"""
        st.sidebar.header("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ")
        
        email = st.sidebar.text_input(
            "Email –∞–¥—Ä–µ—Å",
            placeholder="username@mail.ru",
            help="–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã Mail.ru"
        )
        
        password = st.sidebar.text_input(
            "–ü–∞—Ä–æ–ª—å", 
            type="password",
            help="–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"
        )
        
        connect_button = st.sidebar.button("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", type="primary")
        
        return {
            'email': email,
            'password': password,
            'connect': connect_button
        }
    
    def render_filters_section(self, folders: List[str]) -> Dict[str, Any]:
        """–°–µ–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–ø–∫–∞–º
        selected_folders = st.sidebar.multiselect(
            "–ü–∞–ø–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞",
            options=folders,
            default=folders,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Å–µ–º"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        st.sidebar.subheader("üìÖ –ü–µ—Ä–∏–æ–¥")
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            date_from = st.date_input(
                "–° –¥–∞—Ç—ã",
                value=date.today().replace(year=date.today().year-1),
                help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
            )
        
        with col2:
            date_to = st.date_input(
                "–î–æ –¥–∞—Ç—ã", 
                value=date.today(),
                help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
            )
        
        # RIS —Ñ–∏–ª—å—Ç—Ä—ã
        st.sidebar.subheader("üìã RIS –ø–æ–ª—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        unique_types = self._get_unique_field_values('type')
        unique_years = self._get_unique_field_values('year')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        selected_types = st.sidebar.multiselect(
            "–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (M3/TY)",
            options=unique_types,
            help="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
        selected_years = st.sidebar.multiselect(
            "–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (PY)", 
            options=sorted(unique_years, reverse=True),
            help="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
        author_search = st.sidebar.text_input(
            "–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É (AU)",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞...",
            help="–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        title_search = st.sidebar.text_input(
            "–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (TI)",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...",
            help="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keywords_search = st.sidebar.text_input(
            "–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (KW/DE)",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...",
            help="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
        )
        
        return {
            'folders': selected_folders,
            'date_from': date_from,
            'date_to': date_to,
            'types': selected_types,
            'years': selected_years,
            'author_search': author_search,
            'title_search': title_search,
            'keywords_search': keywords_search
        }
    
    def render_analytics_section(self, filtered_publications: List[Dict[str, Any]]):
        """–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º"""
        st.sidebar.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        if not filtered_publications:
            st.sidebar.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_pubs = len(filtered_publications)
        unique_dois = len(set(pub.get('doi', '') for pub in filtered_publications if pub.get('doi')))
        
        st.sidebar.metric("–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", total_pubs)
        st.sidebar.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö DOI", unique_dois)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
        st.sidebar.subheader("üìà –î–∏–∞–≥—Ä–∞–º–º—ã")
        
        # –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_field = st.sidebar.selectbox(
            "–ü–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            options=['type', 'year', 'keywords'],
            format_func=lambda x: {
                'type': '–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (TY/M3)',
                'year': '–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (PY)', 
                'keywords': '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (KW/DE)'
            }[x]
        )
        
        if st.sidebar.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ—Ç—ã", key="frequency_chart"):
            self._show_frequency_chart(filtered_publications, analysis_field)
        
        if st.sidebar.button("üåü –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", key="concepts_chart"):
            self._show_concepts_sankey(filtered_publications)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.sidebar.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        
        if st.sidebar.button("üìÑ –°–∫–∞—á–∞—Ç—å RIS"):
            self._export_to_ris(filtered_publications)
        
        if st.sidebar.button("üìä –°–∫–∞—á–∞—Ç—å CSV"):
            self._export_to_csv(filtered_publications)
    
    def _get_unique_field_values(self, field: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è"""
        values = set()
        
        for pub in self.publications:
            value = pub.get(field)
            if isinstance(value, list):
                values.update(str(v) for v in value if v)
            elif value:
                values.add(str(value))
        
        return sorted(list(values))
    
    def _show_frequency_chart(self, publications: List[Dict[str, Any]], field: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —á–∞—Å—Ç–æ—Ç"""
        with st.expander("üìä –î–∏–∞–≥—Ä–∞–º–º–∞ —á–∞—Å—Ç–æ—Ç", expanded=True):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = []
            for pub in publications:
                value = pub.get(field)
                year = pub.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                if isinstance(value, list):
                    for v in value:
                        if v:
                            data.append({'value': str(v), 'year': str(year)})
                elif value:
                    data.append({'value': str(value), 'year': str(year)})
            
            if not data:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            
            df = pd.DataFrame(data)
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –ø–æ–¥—Å—á–µ—Ç
            freq_df = df.groupby(['year', 'value']).size().reset_index(name='count')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
            fig = px.line(
                freq_df, 
                x='year', 
                y='count',
                color='value',
                title=f'–ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏: {field}',
                labels={'year': '–ì–æ–¥', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'value': field}
            )
            
            fig.update_layout(
                height=400,
                xaxis_title="–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    def _show_concepts_sankey(self, publications: List[Dict[str, Any]]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Sankey –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤"""
        with st.expander("üåü Sankey –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤", expanded=True):
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—ã –∏–∑ OpenAlex –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            st.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –∏–∑ OpenAlex...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from utils.openalex_utils import OpenAlexUtils
            
            all_concepts = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            for pub in publications[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
                title = pub.get('title', '')
                abstract = pub.get('abstract', '')
                
                if title:
                    concepts = OpenAlexUtils.get_concepts_for_text(title, abstract)
                    formatted_concepts = OpenAlexUtils.format_concepts_for_sankey(concepts)
                    all_concepts.extend(formatted_concepts)
            
            if not all_concepts:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Sankey
            sankey_data = self._prepare_sankey_data(all_concepts)
            
            if sankey_data:
                fig = go.Figure(data=[go.Sankey(
                    node=dict(
                        pad=15,
                        thickness=20,
                        line=dict(color="black", width=0.5),
                        label=sankey_data['labels'],
                        color="blue"
                    ),
                    link=dict(
                        source=sankey_data['sources'],
                        target=sankey_data['targets'], 
                        value=sankey_data['values']
                    )
                )])
                
                fig.update_layout(
                    title_text="Sankey –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤",
                    font_size=10,
                    height=600
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Sankey –¥–∏–∞–≥—Ä–∞–º–º—ã")
    
    def _prepare_sankey_data(self, concepts: List[Dict[str, Any]]) -> Dict[str, List]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Sankey –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        levels = {}
        for concept in concepts:
            level = concept['level']
            if level not in levels:
                levels[level] = []
            levels[level].append(concept)
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–µ–π –º–µ–Ω—å—à–µ 2, –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å Sankey
        if len(levels) < 2:
            return {}
        
        # –°–æ–∑–¥–∞–µ–º labels, sources, targets, values
        labels = []
        label_to_idx = {}
        sources = []
        targets = []
        values = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –≤ labels
        for level in sorted(levels.keys()):
            for concept in levels[level]:
                label = concept['label']
                if label not in label_to_idx:
                    label_to_idx[label] = len(labels)
                    labels.append(label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        level_keys = sorted(levels.keys())
        for i in range(len(level_keys) - 1):
            current_level = level_keys[i]
            next_level = level_keys[i + 1]
            
            for source_concept in levels[current_level][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                for target_concept in levels[next_level][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                    source_idx = label_to_idx[source_concept['label']]
                    target_idx = label_to_idx[target_concept['label']]
                    
                    # –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤—è–∑–∏ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–∫–æ—Ä–∞—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
                    value = (source_concept['score'] + target_concept['score']) / 2
                    
                    sources.append(source_idx)
                    targets.append(target_idx)
                    values.append(value)
        
        return {
            'labels': labels,
            'sources': sources, 
            'targets': targets,
            'values': values
        }
    
    def _export_to_ris(self, publications: List[Dict[str, Any]]):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ RIS —Ñ–æ—Ä–º–∞—Ç"""
        ris_content = ""
        
        for pub in publications:
            ris_content += "TY  - JOUR\\n"  # –¢–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if pub.get('doi'):
                ris_content += f"DO  - {pub['doi']}\\n"
            
            if pub.get('title'):
                ris_content += f"TI  - {pub['title']}\\n"
            
            if pub.get('authors'):
                for author in pub['authors']:
                    ris_content += f"AU  - {author}\\n"
            
            if pub.get('year'):
                ris_content += f"PY  - {pub['year']}\\n"
            
            if pub.get('journal'):
                ris_content += f"T2  - {pub['journal']}\\n"
            
            if pub.get('keywords'):
                for keyword in pub['keywords']:
                    ris_content += f"KW  - {keyword}\\n"
            
            ris_content += "ER  -\\n\\n"
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å RIS —Ñ–∞–π–ª",
            data=ris_content,
            file_name=f"sci_net_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.ris",
            mime="text/plain"
        )
    
    def _export_to_csv(self, publications: List[Dict[str, Any]]):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
        csv_data = []
        for pub in publications:
            csv_data.append({
                'DOI': pub.get('doi', ''),
                'Title': pub.get('title', ''),
                'Authors': '; '.join(pub.get('authors', [])),
                'Year': pub.get('year', ''),
                'Type': pub.get('type', ''),
                'Journal': pub.get('journal', ''),
                'Keywords': '; '.join(pub.get('keywords', []))
            })
        
        df = pd.DataFrame(csv_data)
        csv = df.to_csv(index=False)
        
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª", 
            data=csv,
            file_name=f"sci_net_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
'''

with open("components/sidebar.py", "w", encoding="utf-8") as f:
    f.write(sidebar_content)

print("–§–∞–π–ª components/sidebar.py —Å–æ–∑–¥–∞–Ω")