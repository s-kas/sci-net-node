"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Sci.Net.Node
–ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import streamlit as st
from datetime import datetime, date
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from components.email_handler import EmailHandler
from components.ris_parser import RISParser
from components.sidebar import SidebarPanel
from components.main_panel import MainPanel
from utils.doi_utils import DOIUtils
from utils.openalex_utils import OpenAlexUtils
from config import APP_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=APP_CONFIG["title"],
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏: –±–µ–ª—ã–π —Ñ–æ–Ω, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
st.markdown(
    """
    <style>
      /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
      .stApp {
        background:#ffffff !important;
      }
      .block-container {
        max-width: 1200px; 
        margin: 0 auto;
      }
      
      /* –°—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
      .main h1, .main h2, .main h3, .main h4, .main h5, .main h6 {
        color: #1a1a1a !important;
        font-weight: 600 !important;
      }
      .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        color: #1a1a1a !important;
        font-weight: 600 !important;
      }
      div[data-testid="stMarkdownContainer"] h1,
      div[data-testid="stMarkdownContainer"] h2,
      div[data-testid="stMarkdownContainer"] h3,
      div[data-testid="stMarkdownContainer"] h4 {
        color: #1a1a1a !important;
        font-weight: 600 !important;
      }
      
      /* –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ */
      .stApp p {
        color: #333 !important;
      }
      .stApp span {
        color: #333 !important;
      }
      .stApp div {
        color: #333 !important;
      }
      
      /* –°—Ç–∏–ª–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
      .css-1d391kg, .css-1lcbmhc {
        background-color: #f8f9fa !important;
      }
      
      /* –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ */
      .stButton > button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: 500;
      }
      .stButton > button:hover {
        background-color: #0056b3;
        color: white;
      }
      
      /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π */
      .stSuccess {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      .stError {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      .stWarning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
      }
      .stInfo {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
      }
      
      /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
      @media (prefers-color-scheme: dark) {
        .stApp {
          background: #1a1a1a !important;
        }
        .main h1, .main h2, .main h3, .main h4, .main h5, .main h6 {
          color: #ffffff !important;
        }
        .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
          color: #ffffff !important;
        }
        div[data-testid="stMarkdownContainer"] h1,
        div[data-testid="stMarkdownContainer"] h2,
        div[data-testid="stMarkdownContainer"] h3,
        div[data-testid="stMarkdownContainer"] h4 {
          color: #ffffff !important;
        }
        .stApp p, .stApp span, .stApp div {
          color: #e4e4e4 !important;
        }
        .css-1d391kg, .css-1lcbmhc {
          background-color: #2a2a2a !important;
        }
      }
      
      /* –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤–≤–æ–¥–Ω—ã—Ö –ø–æ–ª–µ–π */
      .stTextInput > div > div > input {
        color: #333 !important;
        background-color: #ffffff !important;
        border: 1px solid #ddd !important;
      }
      .stSelectbox > div > div > select {
        color: #333 !important;
        background-color: #ffffff !important;
      }
      
      /* –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –º–µ—Ç–æ–∫ */
      .stTextInput > label, .stSelectbox > label, .stMultiSelect > label {
        color: #333 !important;
        font-weight: 500 !important;
      }
    </style>
    """,
    unsafe_allow_html=True,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "email_handler" not in st.session_state:
    st.session_state.email_handler = EmailHandler()

if "ris_parser" not in st.session_state:
    st.session_state.ris_parser = RISParser()

if "publications" not in st.session_state:
    st.session_state.publications = []

if "connected" not in st.session_state:
    st.session_state.connected = False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    st.title("üî¨ Sci.Net.Node")
    st.markdown(f"*{APP_CONFIG['description']}*")
    st.markdown("---")

    email_handler = st.session_state.email_handler
    ris_parser = st.session_state.ris_parser

    folders = []
    if st.session_state.connected:
        folders = email_handler.get_folders()

    sidebar = SidebarPanel(st.session_state.publications)

    connection_data = sidebar.render_connection_section()

    if connection_data["connect"] and connection_data["email"] and connection_data["password"]:
        with st.spinner("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É..."):
            if email_handler.connect(connection_data["email"], connection_data["password"]):
                st.session_state.connected = True
                st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ—á—Ç–µ!")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ")

    if st.session_state.connected:
        folders = email_handler.get_folders()
        st.sidebar.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {email_handler.email}")

        if st.sidebar.button("üîå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è"):
            email_handler.disconnect()
            st.session_state.connected = False
            st.session_state.publications = []
            st.rerun()

        filters = sidebar.render_filters_section(folders)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–ª–∞–≥ load_click –∏–∑ sidebar
        if filters.get("load_click"):
            load_emails(email_handler, ris_parser, filters)

        filtered_publications = apply_filters(st.session_state.publications, filters)

        sidebar.render_analytics_section(filtered_publications)

        main_panel = MainPanel()
        main_panel.render(filtered_publications, email_handler)
    else:
        show_welcome_screen()


def load_emails(email_handler, ris_parser, filters):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Å DOI –∏ PDF –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    from datetime import datetime as _dt

    try:
        with st.spinner("üìß –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Å DOI..."):
            date_from = _dt.combine(filters["date_from"], _dt.min.time()) if filters["date_from"] else None
            date_to = _dt.combine(filters["date_to"], _dt.max.time()) if filters["date_to"] else None

            emails = email_handler.get_emails_with_doi(
                folders=filters["folders"],
                date_from=date_from,
                date_to=date_to,
            )

            if not emails:
                st.warning("üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å DOI –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ –ø–µ—Ä–∏–æ–¥–µ")
                return

            publications = []
            progress_bar = st.progress(0)

            for i, email in enumerate(emails):
                progress_bar.progress((i + 1) / len(emails))

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ RIS –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
                ris_data = ris_parser.parse_ris_from_text(email.get("text", ""))
                pub_info = ris_parser.extract_publication_info(ris_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                pub_info.update({
                    "folder": email.get("folder", ""),
                    "from": email.get("from", ""),
                    "subject": email.get("subject", ""),
                    "date": email.get("date", ""),
                    "uid": email.get("uid", ""),
                    "text": email.get("text", ""),
                    "html": email.get("html", ""),
                    "DO": email.get("doi"),
                    "pdf_attachments": email.get("pdf_attachments", [])
                })

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ RIS –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ email
                for key, value in email.items():
                    if key.upper() in ['DO', 'TI', 'AU', 'PY', 'T2', 'VL', 'IS', 'SP', 'EP', 'KW', 'DE', 'AB', 'N2', 'UR', 'L1', 'L2', 'M3', 'TY', 'CR']:
                        if key.upper() not in pub_info or not pub_info[key.upper()]:
                            pub_info[key.upper()] = value

                # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –∏ DOI
                if not pub_info.get("title") and email.get("subject"):
                    pub_info["title"] = email["subject"]
                    pub_info["TI"] = email["subject"]

                if not pub_info.get("doi") and email.get("doi"):
                    pub_info["doi"] = email["doi"]
                    pub_info["DO"] = email["doi"]

                publications.append(pub_info)

            st.session_state.publications = publications
            progress_bar.empty()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º PDF –≤–ª–æ–∂–µ–Ω–∏—è
            total_pdfs = sum(len(pub.get("pdf_attachments", [])) for pub in publications)
            pdf_info = f" (üìÑ {total_pdfs} PDF)" if total_pdfs > 0 else ""
            
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(publications)} –ø–∏—Å–µ–º —Å DOI{pdf_info}")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º: {e}")


def apply_filters(publications, filters):
    if not publications:
        return []

    filtered = publications.copy()

    if filters["types"]:
        filtered = [p for p in filtered if p.get("type", "") in filters["types"]]

    if filters["years"]:
        filtered = [p for p in filtered if str(p.get("year", "")) in [str(y) for y in filters["years"]]]

    if filters["author_search"]:
        term = filters["author_search"].lower()
        filtered = [p for p in filtered if any(term in str(a).lower() for a in p.get("authors", []))]

    if filters["title_search"]:
        term = filters["title_search"].lower()
        filtered = [p for p in filtered if term in str(p.get("title", "")).lower()]

    if filters["keywords_search"]:
        term = filters["keywords_search"].lower()
        filtered = [p for p in filtered if any(term in str(k).lower() for k in p.get("keywords", []))]

    return filtered


def show_welcome_screen():
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(
            """
            <div style="text-align:center; padding: 50px;">
              <h2>üî¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sci.Net.Node!</h2>
              <p style="font-size: 18px; color: #333;">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á–Ω—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
        st.markdown(
            """
            ### üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
            1. **üîê –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ø–æ—á—Ç–µ** ‚Äî –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ Mail.ru –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª
            2. **üìß –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∏—Å—å–º–∞** ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏/–ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞¬ª
            3. **üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã** ‚Äî –ø–æ —Ç–∏–ø—É, –∞–≤—Ç–æ—Ä–∞–º, –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            4. **üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** ‚Äî –¥–∏–∞–≥—Ä–∞–º–º—ã, —ç–∫—Å–ø–æ—Ä—Ç RIS/CSV
            """
        )


if __name__ == "__main__":
    main()